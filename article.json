{"title": "Go 的这十年！Go 语言之父等人回顾", "create_time": "2017/12/04", "praise_nums": 1, "fav_nums": 0, "comment_nums": 0, "content": ["【导读】：Go 语言的主要缔造者 Rob Pike、Robert Griesemer 与 Ken Thompson，他们三人撰文回顾 Go 的发展史与一些重要人物，并曝光促成 Go 诞生的相关邮件的片段。", "2017 年 9 月，Go 语言迎来其诞生十周年纪念日。", "关于 Go 语言设计的初次讨论是在 2007 年 9 月 20 日，一个周四的下午。这次讨论促使 Robert Griesemer、Rob Pike、 以及 Ken Thompson 于第二天下午 2 点，在 Google’s Mountain View 的 43 号大楼的 Yaounde 会议室又组织了一次关于该语言设计的会议。语言的名字于 9 月 25 号确定了，在有关该语言设计的第一封邮件里面有关于命名的考量：", "（译注：这是一封由 Rob Pike 在 2007 年 9 月 25 号，星期二，下午 3：12 回复给 Robert Griesemer、Ken Thompson 的有关编程语言讨论主题的邮件，邮件正文大意为：在开车回家的路上我得到了些灵感。1.给这门编程语言取名为“go”。你可以为这个命名假借各种理由，但它确实有其可取之处。它很简短，易书写。工具类可以命名为：goc、 gol、goa。交互式的调试工具也可以直接命名为“go”。语言文件后缀名为 .go ……）", "Go 项目团队将 2009 年 11 月 10 日，即该语言正式对外开源的日字作为其官方生日。源代码最初托管在 code.google.com 上，之后几年才迁移到 GitHub 上。但是，现在我们要回到语言设计的最初概念构建阶段，即更早的两年，这可以让我们做更进一步地回顾，以更长远的视角，见证语言发展历史上的一系列早期事件。", "如今 Go 已经是云计算编程语言。想象一下：一个只有 10 年发展经历的编程语言已经成为了如此巨大而且正在不断发展的行业的主导者，这种成功是每个人都无法想象的。如果你认为“主导”一词太过强势，请看看中国的互联网。一段时间以来，Go 在中国大量使用的数据一度让我们误认为 Google 趋势图出现了某些错误，但是凡是去过中国，参加过中国区 Go 语言大会的人都可以证实：Google 趋势图的数据是真实的。Go 在中国的使用非常火爆！", "简而言之，Go 语言的十年发展旅程中经历了众多里程碑。最令人震惊的是我们现在的位置：保守估计至少有 50 万 Go 程序员。当发送那封为 Go 命名的邮件时，憧景将会有五十万 Go 追随者，这听起来一定很荒唐。但就在此时此刻，我们不仅有 50 万 gopher，并且这个数量还在持续增长。"], "tags": "IT技术,Go", "url_object_id": "4c6c17f1e0f1344a3e82bc74ed4170c4", "image_url": ["http://wx4.sinaimg.cn/mw690/7cc829d3gy1fm29qjec1aj20sg0hs0to.jpg"], "author": "伯乐在线", "url": "http://blog.jobbole.com/113119/", "image_path": "full/e52a998f9dfbb36e1ef7520ece8e5a7eb3374e2c.jpg"}
{"title": "Git 的 4 个阶段的撤销更改", "create_time": "2017/11/24", "praise_nums": 6, "fav_nums": 6, "comment_nums": 1, "content": ["虽然", "诞生距今已有", "年之久，网上各种关于", "的介绍文章数不胜数，但是依然有很多人（包括我自己在内）对于它的功能不能完全掌握。以下的介绍只是基于我个人对于", "的理解，并且可能生编硬造了一些不完全符合", "说法的词语。目的只是为了让", "通俗化，使初学者也能大概了解如何快速上手", "。同时，下面所有讨论，我们都假设只使用一个分支，也就是主分支", "的情况，虽然这种作法并不符合", "规范，但是现实情况中绝大部分用户是直接在", "分支上进行工作的，所以在这里我们不去引入更加复杂的各种分支的情况，也不涉及标签", "的操作，只讲在最简单的主分支上如何回退。", "正常情况下，我们的工作流就是", "个步骤，对应上图中的", "个箭头线：", "之所以令人费解，主要是它相比于", "等等传统的版本管理工具，多引入了一个", "(", ")的概念，就因为多了这一个概念，而使很多人疑惑。其实，在初学者来说，每个区具体怎么工作的，我们完全不需要关心，而只要知道有这么", "个区就够了：", "以上", "个区，进入每一个区成功之后会产生一个状态，再加上最初始的一个状态，一共是", "种状态。以下我们把这", "种状态分别命名为：", "了解了基本概念之后，我们来谈一谈犯错误之后如何撤销的问题。首先，我们要了解如何检查这", "个步骤当中每一个步骤修改了什么，然后才好判断有没有修改成功。检查修改的二级命令都相同，都是", "，只是参数有所不同。", "首先，我们来看一下，如果我们只是简单地在浏览器里保存了一下文件，但是还没有做", "之前，我们如何检查有哪些修改。我们先随便拿一个文件来做一下实验：", "我们在文件开头的第", "行胡乱加了", "个数字", "，存盘，这时文件进入了", "状态，但是还没有进入", "，我们运行", "，结果如下：", "的结果告诉我们哪些文件已经做了哪些修改。", "现在我们把修改放入", "看一下。先执行", "，然后执行", "，你会发现没有任何结果：", "这说明", "这个命令只检查我们的", "和", "之间的差异，如果我们想看到", "和", "之间的差异，就需要加一个参数", "：", "这时候我们看到的差异是", "和", "之间的差异。", "现在，我们把修改从", "提交到", "，再看一下差异。先执行", "，然后再执行", "，没有差异，执行", "，可以看到差异：", "在这里，", "就是你的", "，而", "就是你的", "，", "是主分支的意思，因为我们都在主分支上工作，所以这里两边都是", "，而", "就代表远程。", "了解清楚如何检查各种修改之后，我们开始尝试各种撤销操作。", "如果我们只是在编辑器里修改了文件，但还没有执行", "，这时候我们的文件还在", "，并没有进入", "，我们可以用：", "或者", "来进行撤销操作。", "可以看到，在执行完", "之后，修改已被撤销，", "没有任何内容了。", "你已经执行了", "，但还没有执行", "。这时候你意识到了错误，想要撤销，你可以执行：", "或者", "只是把修改退回到了", "之前的状态，也就是说文件本身还处于", "状态，你如果想退回", "状态，还需要执行", "。", "或许你已经注意到了，以上两个步骤都可以用同一个命令", "来完成。是的，就是这个强大的命令，可以一步到位地把你的修改完全恢复到", "的状态。", "你的手太快，你既执行了", "，又执行了", "，这时候你的代码已经进入了你的", "，然而你后悔了，怎么办？不要着急，还有办法。", "还是这个", "命令，只不过这次多了一个参数", "，正如我们上面讲过的，", "代表", "，既然你已经污染了你的", "，那么就从", "把代码取回来吧。", "很不幸，你的手实在是太快了，你既", "了，又", "了，并且还", "了，这时你的代码已经进入", "。如果你想恢复的话，还好，由于你的", "和", "是等价的，你只需要先恢复", "，再强制", "到", "就好了：", "以上", "种状态的撤销我们都用到了同一个命令", "，前", "种状态的用法甚至完全一样，所以只要掌握了", "这个命令的用法，从此你再也不用担心提交错误了。"], "tags": "IT技术,Git", "url_object_id": "8c0c41a82d8a071c66cee932bc983942", "image_url": ["http://wx1.sinaimg.cn/mw690/63918611gy1fltan48ktfj21hm12y7f5.jpg"], "author": "张京", "url": "http://blog.jobbole.com/113097/", "image_path": "full/9d795b527a06f13d99a063baa0d1df71c6866891.jpg"}
{"title": "数据库 schema 迁移数据最佳实践", "create_time": "2017/11/27", "praise_nums": 1, "fav_nums": 0, "comment_nums": 0, "content": [], "tags": "IT技术,数据库,数据迁移", "url_object_id": "6430b256b627356fe28c427fcd33ae0e", "image_url": ["http://jbcdn2.b0.upaiyun.com/2017/02/d96d4345a7d19d365cae211b5a3b2bbd.png"], "author": "伯乐在线", "url": "http://blog.jobbole.com/113079/", "image_path": "full/677e16388d72aba17372c375d07615d374d00847.jpg"}
{"title": "数据库新动向 Oracle 与微软割据局面产生", "create_time": "2017/11/25", "praise_nums": 1, "fav_nums": 0, "comment_nums": 1, "content": ["【IT168 评论】数据库是一个历久弥新的领域，每年有很多新的黑马产生，但是整体局面却又看不出大的变化。究其原因可能是老牌厂商占据了主要市场，新伙伴的加入只能稍改部分局面，却无法撼动大的格局。", "今年，DB-Engines指数和数据库领域都有了一些新的变化，既有新的组合产生，也有高歌猛进的黑马选手，同时也有不进则退的老牌选手。虽然，黑马选手无法撼动大局面，但是新鲜组合的诞生是否会创造出新局面呢?", "在DB-Engines榜单上，Oracle占据第一位，MySQL千年老二的局面从2013年开始就几乎没有改变过。但是2016年却是一个分水岭，虽然二者的地位没有出现变化，但是从这一年开始，MySQL开始了雄心勃勃的逼宫之旅，而Oracle却从这时开始走上了下滑之路。", "2016年5月，MySQL与Oracle之间的差距不断缩小，并在2017年6月达到历史最接近点，Oracle综合得分为1351.762，而MySQL综合得分为1345.307，双方相差仅有短短的6.5分。MariaDB是MySQL的一个分支，如果MariaDB+MySQL组合起来对抗Oracle，其实Oracle的霸主地位早已不保。2016年11月， MySQL得分为1373，MariaDB得分为42，双方分数相加已超过Oracle 1413的得分。", "上文我们说到，MariaDB是MySQL的一个分支，如果两方联手目前已经撼动了Oracle的霸主地位。但事实却并非如此， MariaDB作为MySQL的创始人Michael Widenius的另一个作品，显然作者并不想走MySQL的老路。所以为了确保MariaDB项目由用户驱动，从一开始，MariaDB就建立了基金会。", "今年11月份，MariaDB找到了大金主微软。据悉，微软作为白金会员加入MariaDB基金会，将为MariaDB的研发提供更强大的物质保障，同时也会提升MariaDB在支持Windows方面功能的水平，并在不久的未来会有一个MariaDB的Azure数据库预览版诞生，这将是一个完全托管的MariaDB的云托管版本。", "众所周知，Oracle和MySQL现在同属于Oracle公司。而SQL Server作为微软方数据库近几年来表现上佳，但始终没有突破Oracle和MySQL，微软此番加入MariaDB基金会，是否会形成Oracle+MySQL VS SQL Server+MariaDB的新割据呢?巨头对垒，是否会有新的火花产生呢?", "DB2作为数据库佼佼者，曾经也是风光无限，但是最近几年表现平平，已经沦为第二梯队了。近几年来，几乎很少能够听到DB2的声音，反倒是随着”去IOE”运动轰轰烈烈的进行，听到了很多替换DB2的声音。", "如今，DB2的大部分份额都集中在金融系统中。金融业务由于对业务可持续性要求很高，而且对于数据安全性的要求更高，各种风险控制力度也更大，所以DB2不会轻易被替换。但是我们最近走访了一些金融企业，发现很多企业已经在着手替换DB2，而有些企业虽然没有替换DB2的想法，但是主要目的却是为了制衡Oracle，防止一家独大。", "MongoDB和PostgreSQL作为新数据库的代表近几年的发展可谓是突飞猛进，从上图中我们可以看到，他们两已经远远的将DB2甩在了身后。2017年，关于MongoDB和PostgreSQL的声音也是不少，如MongoDB IPO，中国开源软件推进联盟PostgreSQL分会成立等等。", "在应用方面，二者也是颇受开发者和企业关注。国外知名 IT 技术媒体 Jaxenter 对2017年数据库趋势做了调查，其中63%的调查者表示对PostgreSQL很感兴趣，而49.8%的调查者表示对MongoDB很感兴趣。根据我们对于金融行业数据库选型的调研，MongoDB和PostgreSQL目前在金融行业均有应用。"], "tags": "IT技术,数据库", "url_object_id": "e8841b41611f2bb57d64abd2fa79d836", "image_url": ["http://jbcdn2.b0.upaiyun.com/2017/03/4bae6998d00f180d42c7da716e3d0bb2.jpg"], "author": "IT168/田晓旭", "url": "http://blog.jobbole.com/113100/", "image_path": "full/117976068e2e847f1067d25ea3fa90a3b5a60f3f.jpg"}
{"title": "历史上第一位从事游戏开发与设计的女程序员", "create_time": "2017/11/23", "praise_nums": 1, "fav_nums": 0, "comment_nums": 0, "content": ["四十年前，消费品电子巨头RCA发布了一款可编程的电子游戏开发环境Studio II，并与Fairchild Channel F一起成为那个时代率先使用ROM存储器作为可交互游戏媒体的产品。", "只不过，RCA的开发环境与Atari的VCS，Magnavox的Odyssey或Mattel的Intellivision并未正面竞争，所以如今很少有人记得这些。但仔细挖掘，背后的真实故事仍然令人感慨。其实，这项开发最早成型于1969年，是作为Joseph Weisbecker在家进行软件开发的个人电脑来使用。而后来，他的女儿也就是Joyce，成为了最早从事开发的女性，并因此而获得劳动报酬。", "谈及Joyce的工作经历，没有太多人知晓，以至于后来有位设计了Activision经典游戏River Raid的Carol Shaw被外界誉为“第一位专业女性电子游戏设计师”。但事实证明，从时间维度上看，Joyce的成果相对还要早两年。", "而且更为惊奇的是，Joyce在没有成为RCA正式员工的情况下就完成了这项开发。“我知道RCA没有别的女性在做开发，只有几个男员工从事这项工作。我想我应该是这家公司第一个真正拿到电子游戏开发项目费的人。换言之，我也是第一个合同工。而且，可能还是第一个独立的电子游戏开发者，因为这个项目从头到尾仅有我负责，公司只是给予证明。”", "Joyce于1958年出生于新泽西州。童年时，他的父亲是一名对开发逻辑游戏的忠实爱好者，为当地的魔术师设计舞台环境，剩下的时间就闷在家中地下室里创造电子发明。她的母亲Jean Ann则是一名小学老师，她强调教育的重要性并鼓励女儿去追求自己想要的事情。", "所以，每当Joyce一有机会，她会在父亲工作的地方RCA的办公室里写上便签，以便了解最近发生了什么事情。在那里，工程师们非常热心地答疑解惑，尤其是在1960年代中期由RCA工程师开发原型台球电子游戏期间，潜移默化之中这对Joyce的成长帮助非常大。", "除此之外，Joyce的父亲还对计算机的未来非常着迷。Joyce讲了一个故事：1955年的秋天，当父母第一次见面时，她的父亲曾告诉她的母亲，总有一天电脑将大幅度缩小，所有东西包括冰箱、烤箱、打字机都数字化。", "而在那时，电脑基本上是以真空管为驱动力的庞然大物，所耗费的电量基本上可以达到一小座城市。所以，Joyce的父亲最开始是在纸上进行了大量的计算实验。", "随着技术的改进，他开始在家里用计算机进行实验。当时，一家名为Heathkit的公司出售各类电子产品和电器，任何人都可以订购，并自行拆解或组建。Joyce提到，“他想购买Heathkit产品来组装电脑，但因为没有任何可用的东西，他决定设计像Heathkit这样可以组装的电脑产品，这样其他人都能获取到。”", "当时，一台典型的小型计算机可能需要花6000到25000美元之间，而1972年美国家庭的平均年收入为11286美元。", "当她父亲在地下室度过无数个小时之后，他为自己设计了一套完整的计算机系统，包括一个定制的CPU、部分组件和线路。", "Joyce回忆，1969年她曾陪同她的父亲到Radio Shack商店购买电脑原型的零件：那时，他不得不跑到四个不同的商店，以获得足够的开关和零部件，保证电脑前面板的八个指令位各有一个开关。一路上，他并没有大肆宣扬自己的计划，因为这样会引起店主的怀疑，在别人看来这个想法十分疯狂，会阻碍他的实施计划。", "这款实验性电脑有个有趣的名字和笑脸吉祥物。因为，当Joyce开始接触这第一台家庭电脑原型后，他父亲将其取名为FRED，Flexible Recreational Educational Device，意思是“灵活的休闲教育设备”。从1970到1972年间，他一直都在使用这款电脑。", "在完成了FRED之后，Joyce的父亲开始在樱桃山一栋1300平方英尺的房子餐厅旁边的封闭式门廊里安装了自己的机器。随后不久，在Joyce和她的妹妹Jean得到父亲的鼓励之下，Joyce不仅玩起了这款机器，甚至开始学习编程。", "她回忆说：“这简直就是得天独厚的优势，而且在我看来这很有意思”。也就是从高中时期起，Joyce成为了少数几个知道如何使用学校可编程到100步的计算机。", "与此同时，FRED这款机器引起了RCA的注意。当时，恰恰赶上RCA的低谷期，RCA最近因为未能成功进入大型计算机市场而功亏一篑，最终还损失了价值数百万美元的订单。", "大概在1973年前后，RCA开始重新将注意力转移到电脑上，而FRED的8位计算架构则成为构建完整计算机芯片的一部分。随后，Cosmac 1801系列，一种双芯片微处理器系统，于1975年首次在市场上出售。尽管RCA高层的目标是将计算机控制投入工业应用，但Joyce的父亲从来没有放弃想要给大众创造教育电脑的梦想。", "尽管直到1977年七月，Channel F投入市场之后，Studio II才正式发布，但早在1975年，包括盒式磁带游戏在内的技术方案已经就绪。", "1976年的夏天，Joyce高中毕业之后，在骑士大学的的第一个学期假期，在家用电子产品的父亲问她是否想要为RCA编程电子游戏。", "鉴于她的父亲在机器上有着非常丰富的经验，Joyce首先进入RCA Cosmac VIP的编程演示游戏，这是一种基于FRED设计的廉价商用计算机套件，既可用作原始家用PC，也可用作Cosmac 1802 CPU应用的开发套件。", "Snake Race和Jackpot两款程序标志着Joyce在RCA的首次亮相，尽管此时的她并没有得到报酬。结果，她的父亲以非常低的预算开始了VIP项目。RCA则将她编写的软件作为程序清单列在VIP手册中，由机器持有者手动操作键入。", "随着Studio II 家庭游戏操作系统项目的上线，Joyce的命运转折开始了。在此之前，RCA的一名老员工终止了Studio II 的19个盒式发行版的大部分编程，但Joyce的父亲认为这是他女儿获得更多编码经验的好机会。", "而教育领域的开发便成了Joyce父亲关注的焦点。因为，在他看来Studio II只是一件价格低廉的家用电脑，像游戏机一样，他曾建议RCA利用好与子公司Random House教育教科书之间的业务联系。", "\n八月的一天，Joyce的父亲回到家，说：“公司正在筹建工作室，希望有人来基于Studio II来做个测试。你想不想？”", "“听起来挺无聊的”，年轻的Joyce答道。", "“但如果将这个项目写到你的简历上，那么你获得的远不止如此……”", "于是， TV Schoolhouse I项目就这样在1976年8月的一天开始了。Joyce首先花了一周的时间编写简单的游戏程序，然后在他父亲的FRED原型机上工作，用纸笔记写出汇编代码，然后用十六进制键盘输入内容，一次一条指令。此次，她以匿名的方式完成了这项工作。", "1976年10月，Joyce编写了两个动作游戏：Speedway和Tag。Speedway场景中，玩家在高架赛道上驾驶一辆小型汽车与另一名玩家一起驾驶。但只有一个问题：Studio II极低的64 x 32像素图形分辨率很难呈现出清晰的画面。", "Joyce提到：“与现代计算机打交道的人根本没法体会到这种限制。困难之处，并不在于如何与2K代码相匹配或如何在一个缓慢的处理器上处理，真正难的地方在于，如何在这样悠闲的空间上面展示出游戏的状态。这就相当于，你有两个32×32的黑白Windows图标，而这就是你整个屏幕大小。”", "这也就解释了为什么在Speedway这款游戏中，Joyce选择用两个白色方块代表赛车，其中一个白色方块中央有一个黑点。“而在那时还有人批评说看起来不像一辆汽车。”", "至于另一款游戏Tag，在这个双人游戏中，每个玩家控制屏幕中一个点。其他的玩家需要引导自己与其他的玩家位置尽量远离。每次比赛是两分钟时间，谁分值最大，谁赢得比赛。", "Tag这款游戏几乎代表了所有可以在屏幕上显示两点的最简单的视频游戏。然而，巧合的是，1967年Sanders Associates的Ralph Baer和Bill Harrison创造了第一个基于电视的视频游戏——“追逐游戏”。", "Joyce开发的两款Tag和Speedway游戏最终收到250美元的劳动报酬，相当于2017年1000美元。她回忆说：“我在十月份发送了代码，但显然公司并不喜欢这款游戏，我意识到我可以把它变得更快。11月份，我给他们发了一个修订版。很大程度上，也是受到时代的局限性。”", "相比同一时代的Fairchild Channel F，由于市场认可度不高，在发售之初Studio II就已经过时了。", "除了分辨率低之外，Studio II的一个重要缺点是内置的Touch Tone-like键盘控制器，无法使用操纵杆。Joyce认为有很多原因，其中包括降低制造成本等问题。而RCA则希望把Studio II当做一款权宜产品，包括一台配有色彩的Studio III游戏机，一台Studio IV家用电脑，以及一台完整的Studio V电脑。", "加上技术能力的不足和游戏库的限制，Studio II卖得并不好，而且RCA在1978年2月刚刚过了一年之后就匆忙下架。", "而Joyce的父亲仍然踌躇于教育计算机产品计划无法实现。对于RCA而言，这些消费电子产品本身并非首要战略产品，“RCA从来都不想进入视频游戏市场，相反，他们希望开拓的是半导体市场。”", "后来他父亲设计的一款Cosmac 1802 CPU获得了巨大成功。尽管它在娱乐和家庭电脑产品中表现不佳，但仍然被用于汽车、起搏器、甚至太空探测器。1969年，Joyce父亲为其家用计算机设计的一种计算机架构的芯片至今仍在投入使用，并因其容错性和耐用性受到好评。", "1977年，Joyce还和RCA继续签订合同，编写了三款游戏：Slide、Sum Fun和Sequence Shoot。 在此之后，她的合同到期了。在决定是否继续追求游戏开发的时候，Joyce想清楚了：她决定在快速成长的早期家用电脑游戏市场上，继续接受挑战。", "“谁会真的想住在家里，每天晚上都要复制磁带，到邮局去做指令手册的复印件，然后回家把它们放入Ziploc袋子再邮寄给人们？“Joyce调侃道，“只不过，那是当时的电脑游戏行业。”", "Joyce继续完成大学学业，直到于1980年获得计算机工程和精算科学学位。她从事精算工作，也是部分受到父亲的偶像埃德蒙·伯克利（Edmund Berkeley）的启发。", "1998年，她回到学校取得电气工程学士学位和计算机科学硕士学位，并曾担任设计数字滤波器的雷达信号处理工程师。而近年来，她又开始对游戏发展感兴趣了。她解释说：“我正在尝试做一些非常有趣的人工智能和电脑辅助动画。因为我意识到我想要做带有故事情节的合作型游戏。”", "回想起来，Joyce并不是特别想成为第一位女性电子游戏开发者。对她来说，那只是一个巧合。相反，她认为自己可能是第一个“独立”的电子游戏程序员。", "尽管如此，她仍然扮演着科技英雄的角色。在科技史上，每个像史蒂夫·乔布斯和比尔·盖茨的人都有一位像她这样被历史所遗忘。通过纪念她在二十世纪七十年代家用游戏机市场刚刚起步时取得的成就，我们希望有更多优秀的工程师和科学家为历史铭记。"], "tags": "业界,女程序员", "url_object_id": "1e0dc0d206e3fc220237005f2f2b6d79", "image_url": ["http://jbcdn2.b0.upaiyun.com/2017/11/54e2d500f3322698def59096bd083236.jpeg"], "author": "CSDN资讯", "url": "http://blog.jobbole.com/113089/", "image_path": "full/7bbeedce25a9586fbafdddeee40d709e4b18037e.jpg"}
{"title": "Google Brain 推荐算法，给了 Youtube 新生", "create_time": "2017/12/04", "praise_nums": 1, "fav_nums": 0, "comment_nums": 0, "content": ["去年晚些时候，我在玩《羞辱2》（Dishonored 2）游戏时，照常在 YouTube 上搜索了如何通过游戏中棘手的部分。和往常一样，我找到了一个能回答我问题的视频。", "但是在我下一次访问 YouTube 时，网站给我推送了更多引人入胜的《羞辱》游戏视频，比如：", "我到 YouTube 去寻找我问题的答案，它则向我展示了一个宇宙。", "随后，我发现自己一天就要访问 YouTube 好几次。大多数时候我都漫无目的，我已经习惯了网站主动提供我会喜欢的视频。一月份的时候，我迷上了一个叫 ", " 的民谣摇滚乐队，几周内 YouTube 就向我提供了几乎所有上传到服务器上的该乐队现场演出。当我今年春天有了一个新公寓时，我开始更频繁地下厨了。在我搜索了如何做意大利面包沙拉之后，YouTube 很快就向我推送了大量专业厨师：", "、Serious Eat 的 ", "、以及 ", " 团队等。", "YouTube一直都是非常实用。自从它于 2005 年成立，就一直是网络的中流砥柱。但是过去一年左右，反正对我来说，YouTube 似乎开始变得出奇的好。这个网站开始以怪异的准确性来预测我可能会感兴趣的视频——比以前精准太多了。那么什么改变了呢？", "在 12 年的历程中，YouTube 已经从一个搜索驱动的网站转变成了一个本身就是目的地的网站。实现这一转变需要数百次的实验、少量的重新设计，以及在人工智能领域的一些重大飞跃。但是真正提升了 YouTube 的，是其在 feed 上的演化发展。", "虽然现在很难回忆起来，但是 YouTube 最初不过是基础设施：它提供了一个把视频嵌入其他网页上的简便方法，这也是你最可能用到它的地方。随着 YouTube 的发展，它成了一个寻找档案电视剪辑、补深夜喜剧，以及观看最新热点视频的网站。除了维基百科以外，YouTube 很可能是网上最引人入胜的地方。你的同事在饮水机旁边提到了 ", "，于是你花了余下的整个晚上，去 YouTube 上看了 Harlem Shake 的视频。", "与此同时，Facebook 已经发明了我们这个时代的定义形式：News Feed。它是根据你的兴趣，个性化定制的无限更新流。Feed 占领了消费者网络，从 Tumblr 到 Twitter，到 Instagram，再到 LinkedIn。YouTube 早期实现个性化的方法要更有限，包括要求用户订阅频道。这个比喻来自于电视，并且产生了混杂的结果。虽然 2011 年的大量推送订阅取得了一些成功，但是 ComScore 上的数据显示，一个人观看 YouTube 的平均时间却没有变化。", "频道不再像曾经那样支配着 YouTube。现在，在手机上打开 YouTube， 会发现它们隐藏在一个分开的标签页里。而应用打开的则是一个 feed 流，由根据用户兴趣定制的视频集组成。当然有来自你订阅频道的视频，但是还有来自你可能没有看过的频道的视频，这些视频跟你之前观看过的视频相关。", "这就是为什么直接搜索了《羞辱》（Dishonored）视频之后，我开始看到游戏中的秘密行动和讽刺评价的推荐。YouTube 开发的工具使得它的推荐不仅是个性化的，而且极其准确，从而增加了整个网站的视频观看时间。", "YouTube 推荐的技术领导 Jim McFadden 在 2011 年加入了公司，他说：“当人们知道他们是来找什么的时候，我们知道他们会上 YouTube。我们也希望在他们不一定知道想找什么的时候，为他们提供服务。”", "在 2011 年 McFadden 加入 YouTube 几个月后，我第一次访问了这个公司。YouTube 当时和现在一样，", "都是让用户花更多时间来观看视频。那时事情进行得不是特别顺利。McFadden 说：“YouTube.com 作为一个主页，并没有大量参与度。我们想，既然这样怎么才能把它转变成目标呢？”", "Youtube 尝试了很多方法。给顶部的视频主（top creator）购买了专业摄影仪器。引进了 ", "，这个特性允许用户在当前视频播放时排列一会要看的新视频。重新设计了 Youtube 主页，突出订阅频道而不是单独的视频。", "每个用户观看的视频数量没有变化，但是一个改变让接下来的那个春天终于有了起色：YouTube 的算法推荐不再基于视频点击量，", "视频观看时长。", "几乎一夜之间，那些从误导人的标题和缩略图中获益的视频主就发现他们的浏览量暴跌。更高质量的视频不断涌现，这些视频与更长的观看时间紧密相连。接下来的三年，YouTube 的用户观看时长每年增长 50%。", "我订阅了几个频道，并认为自己称得上是一个 YouTube 的常客。但是要想让它变成一个每天能被访问很多次的网站，YouTube 需要一些新的工具——这些工具在过去 18 个月内才成为现实。", "这个月当我拜访 YouTube 办公室时，McFadden 揭示了 YouTube 突然的准确推荐的原因：Google Brain，它是母公司的人工智能部门，YouTube 从 2005 年开始使用它。Google Brain 不是 YouTube 使用人工智能（AI）的第一次尝试。YouTube 之前利用过 Google 建立的系统 Sibyl，将机器学习技术应用于推荐。但是 Google Brain 应用了一种叫非监督学习的技术：它的算法能够找到不同输入之间的关系，而软件工程师永远想不到这些关系。", "“它的关键之一是，它能够概化（generalize）。然而之前，如果我看了一个喜剧演员的视频，我们的推荐很擅长说，这还有一个和它一样的视频。但是 Google Brain 模型能选出其他相似但并不完全一样的喜剧演员——甚至有更紧密的关系。它能够看到不那么明显的模式。”McFadden 说。", "举个例子，Brain 算法开始向 YouTube 手机应用用户推送短视频， 向电视应用用户推送长视频。它推测，根据平台来推送不同时长的视频，能够增加视频观看时长；这个想法是正确的。YouTube 在 2016 年发布了 190 个类似的改动，并且会在今年逐步发布另外 300 个。Todd Beaupre 是 YouTube 挖掘团队的产品组经理，他说：“事实是，大量小的改进随着时间逐步积累。对每一个改进，你尝试了 10 件事，并发布一个。”", "Brain 算法比 YouTube 之前运算得更快。过去几年，它需要花几天时间来将用户行为与未来推荐整合起来。该公司说，这使得公司很难确定热门主题。“如果我们想要让用户回来，弄清现在正在发生什么，那么我们已经从某种程度上解决了这个问题。现在的延迟是用分钟或者小时计算的，而不再是几天了。”Beaupre 说。", "整合 Brain 产生了巨大的影响：超过 70% 的 YouTube 视频观看时长都是由算法推荐产生的。每天，YouTube 向用户推荐 200 万个不同的、76 种语言的视频。人们在 YouTube 主页上观看视频的总时长比三年前增长了 20 倍。", "这大概和我自己的行为对上了。几年前，我开始经常在午餐时间访问 YouTube 主页，这样吃饭的时候可以看看视频。但是它的推荐足够好，让我开始更经常地给自己 YouTube 休息时间。本周我失控了，在 PlayStation 4 上登陆了 YouTube，这样我就能在我所拥有的最大屏幕设备上看推荐视频了。", "这就是真正个性化 feed 的强大之处。但是我对 YouTube 的感觉，与其他组成电子生活的事物很不同；这让我感到吃惊。Facebook 的 feed 是基于好友的动态，以及你点过赞的主页的动态。它能告诉你谁订婚了或者生孩子了。但是我觉得，这些关于好友里程碑式事件的动态内容没那么有趣。Twitter 中则有关注人的推文，以及他们转推的内容。作为一个记者，我几乎被要求住在 Twitter 里，尽管最近主页的时间线里只有无穷无尽的、慌张的尖叫。", "每种 feed 都有它的长处，尽管 2017 年让它们消减了。在 Twitter 上，无论你关注了谁，政治都主导了所有讨论。Facebook 对事件和组这类特征的一时热情导致它的 feed 周周都以不和谐的方法转变，让我觉得我和好友们不再那么相联。（都是图片的 Instagram 仍然像个绿洲，这个应用仍然在快速增长也不是什么奇迹。）", "Facebook、Twitter 和 Instagram，他们的 feed 都经常要求你在他们的平台上表演；这似乎很显著。YouTube 明显是由表演驱动的，即使只有小部分的用户上传过视频，它也不曾对用户施加压力，要求他们上传视频。人们可以被动地享受 YouTube，就像它想方设法地想要取代的电视频道。在这个疯狂的时代，在没有被问到我对当天新闻的反应时，有些东西也能保持镇静。", "YouTube 强调与你可能喜欢的视频相关联的视频，这意味着它的 feed 似乎总要比它同类型的网站在视野范围上更广、更好奇。YouTube 越是在远的地方寻找内容，它越像是想要逃离其他 feed。在黑暗的一年，我会接受 YouTube 提供的所有东西来逃避现实。", "2013 年，Alexis Madrigal 在 Atlantic 上写道，假定我们知道 feed 已经达到了顶峰。他认为，未来是属于有限的经历的：时事通讯邮件、Medium 专栏、10 集的 Netflix 剧集。毕竟，无穷无尽的内容流让人感到疲惫。“当媒体主义的秩序废止时，自由不会冲进真空吸尘器里，但是会产生一个有着它自己逻辑的新兴秩序。”Madrigal 写道。“我们发现，流引进了它自己种类的强烈欲望和约束。更快！更多！更快！更多！更快！更多！”", "4 年来，YouTube 的方法表明 feed 只会变得更加重要。抵制一个与不断提高的个性化方法相对应的、不断增长的视频库是困难的。YouTube 现在对用户进行了调查，调查他们有多喜欢推荐给他们的视频；随着时间流逝，结果会使 YouTube 更聪明——会导致更多的视频被「消费」。", "Beaupre 向我把这个过程描述成穿过峡谷。“这里有与你喜欢过的视频紧密联系的视频，也有热点和流行的视频。但是在这之间，是魔法区。”如果 YouTube 的对手无法找到穿过峡谷的路，他们可能会发现很难与 YouTube 抗衡。"], "tags": "其他,Google Brain,Youtube,算法", "url_object_id": "c6756a8d7f29cfd491297923fa0cbbcb", "image_url": ["http://wx3.sinaimg.cn/mw690/7cc829d3gy1fm098yai29j20g40apq4j.jpg"], "author": "伯乐在线", "url": "http://blog.jobbole.com/113153/", "image_path": "full/b1f2264c1f51fd5a79fff3be41bb947d60891d5b.jpg"}
{"title": "刚收到了Facebook的Offer，我是这样为面试做准备的", "create_time": "2017/11/27", "praise_nums": 1, "fav_nums": 0, "comment_nums": 0, "content": ["我刚刚在硅谷的科技公司完成了 7 次现场面试，我收到了来自 Facebook 的软件工程师的职位 Offer。下面分享一下我是怎么为面试做准备的，以及我在这个过程中学到的东西。", "当我还在澳大利亚的大学学习计算机科学的时候，我总是想象着未来能成为硅谷的一名软件工程师。我希望自己未来能够到科技行业的创新中心硅谷去工作。这个目标让我充满了动力，它也让我能够更加专注地准备面试。", "为了更好地学习，我辞去了在墨尔本一家非常棒的公司的首席 iOS 工程师的工作，然后回到了我的家乡城市珀斯。在珀斯，我开始为硅谷公司的面试做准备。我知道面试准备将是非常困难和艰巨的一项任务。", "如果你告诉一群软件工程师技术面试的流程，其中的很多工程师都会对常见的面试方法持反对意见。很多争论来自于这样一个观点：即在白板上解决算法问题实际上并无法实际代表软件工程师是否能在实际工作中完成日常任务。", "我在这篇文章中不会去讨论这个话题。相反，我将从应聘者的角度来探讨不同类型的面试实践。同时，我还会分享我自己在面试过程中学到的东西。", "在我准备的面试的过程中，我始终知道面试是非常具有挑战性的。但是直到我被第一次面试折磨之后，我才知道面试是那么困难。", "在面试前，我曾使用过一些付费和免费服务，这些服务可以让那些拥有行业经验的人通过电话对应聘者进行代码和白板模拟面试。这种面试模拟练习对我应对真实面试中所面对的压力是非常有帮助的。但是后来我逐渐发现，模拟面试练习只相当于真实面试内容的很小一部分。", "我的建议是，在你没有积累一些模拟或实战面试经验之前，不要面试你梦寐以求的工作岗位。面试中紧张的情绪会让你难以承受，只有通过不断练习才能克服这种紧张的情绪。", "和生活中的其他很多事情一样，不断练习可以增强你的自信。", "如果你在最开始的电话面试中表现得足够好，你就有机会参加现场面试，面试可能会持续整整几天的时间。每次面试通常会持续 4 到 6 个小时，具体时间取决于你所面试的公司。", "在我自己在硅谷面试的过程中，我总共进行了 7 次现场面试，这让我对目前的面试现状有了一个独特的看待视角。", "通常情况下，现场面试会覆盖三个主要面试主题：算法、架构设计和行为，这些正是我专门研究和精心准备过的面试内容。然而，也有一些公司似乎不按常理出牌，他们会扩大的面试内容范围，以考察应聘者的更多实用技能。", "这是最常见的面试类型。面试官会要求你在白板上解决一个问题，并据此来评估你对数据结构、排序算法、递归、时间/空间复杂度分析、模式和极端案例识别等方面知识的掌握情况。在这样的面试中，你通常会提出一个蛮力的解决方案，然后试着改进这个解决方案，并且讨论权衡不同的解决方案。", "这类面试是我准备最充分的面试类型，因为连续 6 周时间，我每一天都会练习在一个廉价的悬挂白板上解决算法问题，分析它们的时间/空间的复杂性，真正理解所写的每一行代码带来的结果。", "就我个人而言，我非常喜欢白板算法，因为我不需要担心编写可编译的语法，这让我能够专注于解决手头要解决的问题。其他人可能不喜欢在白板上进行算法面试，对于这些人，我要说的是，如果能坚持练习，这可能会改变他们的想法。", "这是一种非常有趣的面试类型，也是被我严重低估的一种面试。面试官会要求你在白板上设计一个系统，比如停车场的售票系统、聊天通讯系统、推特信息流系统以及其他常见的系统。", "通过这类面试，面试官考察的是，在你拿到一个宽泛的概念之后，你如何设计一个能够满足所有需求和限制性条件的系统。在这个过程中，需要应聘者提出正确的问题，因为这些问题将会定义需求和限制性条件。这类面试过程更多的是一种对话，你需要在这个过程中画一些图表，甚至是阶级结构。所有这些都是一种高层次的交流，所以你不需要编写任何实际的代码。", "当然，你应该对交流内容进行引导，从而能让面试官了解你在系统工作方式方面的知识。如果你是一名后端工程师，你无需探讨客户端应用程序机制的细节，除非你之前在那个领域积累过一定的专业技能和知识。我是一名 iOS 工程师，所以我在这类面试中会主要谈到架构模式、功能的模块化、设计模式，而不是谈论如何扩展 API 端点之类的内容。", "面试官会问你一些关于你自己的问题以及你如何处理一些特定的情况。准备这类面试并没有准备其它几类面试那么难，但是它需要你自己做很多自我反省。", "通常会问到的问题包括：", "我觉得很难把这类面试搞砸，但我发现很多人确实在这类面试中出了问题。他们试图把自己的强项伪装成弱点，他们回答问题时只说那些他们认为面试官会想要听到的答案，甚至把失败项目的责任转嫁到别人身上。类似下面这样：", "要知道，这些面试官都是经过严格训练过的专业人士，他们能轻易辨别那些不称职的人，并且对应聘者所说的废话谎言非常敏感。他们能快速将那些不合格的候选人 Pass 掉。在面试过程中，要真诚，不要耍小聪明，要表现出对你的工作的热情，承认你的缺点，并表现出有改进缺点的主动性和强烈意愿，只有这样，你才能得到面试官的青睐。", "这通常是与行为面试结合在一起考察的，这主要考察你是否符合公司的价值观。例如，Facebook 鼓励黑客似的文化，鼓励员工大胆尝试新想法，并通过试验对想法进行测试，而不是害怕打破陈规，也就是所谓的“Move fast and break things”。Airbnb 希望创造一个让人们在任何地方都能找到归属感的世界，所以他们通常会寻找那些具有良好好客技能的人才。", "很多大型科技公司都非常重视企业文化，并根据应聘者是否符合公司价值观来决定是否录用他们。如果你在这样的一家公司里面试，你需要想办法了解这家公司的价值观，并找到你自己那些与公司文化相契合的过往经历，并向面试官展示出这一点，这一点非常重要。", "一种非常有趣的面试类型是，让你和另外一位工程师在一个设置好的编程环境中结对编程，这和实际工作场景非常类似。你会被分配一个基本的任务，任务中列出了你必须完成的一系列需求列表。在你完成每一个任务后，面试官会要求你实施更多的功能，直到到了规定的时间为止。在这个过程中，你可以自由使用你想使用的任何资源，如 Stack Overflow 或在线文档。", "我发现，在这样的面试中，很多候选人能否通过考察主要依赖于他们真实世界的开发经验。与白板面试不同，在这类面试中需要你写出语法正确的代码，因此你应该彻底了解你的编程语言和环境，因为你肯定不希望在编程面试过程中花太多时间去在网上或文档里搜索答案。", "在我之前的工作中，在我在做一项任务时，我会写干净的代码，然后等我觉得任务完成之后再进行优化。这种工作方式对这种类型的面试是不利的。", "作为工程师，我们所做的很多工作都是围绕着找到和修复那些我们从不同渠道搜集到的 bug。在这类面试中，你会得到一个需要你去找到和修复的 bug 列表，在这个过程中，你还需要识别其他可能存在问题的代码。", "我自己只经历过一次这样的面试，我觉得这类面试真的很难让人做好准备，特别对那些经验所有欠缺的初级工程师更是如此。每个编码环境都有各自的小怪癖和细微差别，我所做的很多 bug 修复工作都来自于以前的 IDE（集成开发环境）的经验以及我在过去多年时间里积累的相关框架。", "在我们今天看到的大多数通用语言中，编程基本上是相同的。如果你知道一种编程语言的面向对象编程，那么这些技能多半能够转移到另一种编程语言里。但是，这类面试的考察技是不能在语言或框架之间相互转换的。面试官将会在特定的环境下考察你在有关 API、内存管理、功能和局限等专业领域知识的掌握情况。", "对于这类主题的面试，练习是很具挑战性的。和上文中说过的发现并修复 bug 面试类似，我觉得这类面试问题的答案大都来自于过往的经验。根据你所申请的职位的级别的不同，面试官评估你的答案的标准会有所不同。例如，如果你申请的是一个初级职位，不知道为什么一个 API 的结构是特定的，那么面试官会在这方面做出让步，不会对你要求太高。然而，如果你申请的是一个高级职位，面试官对你的要求会更高，这时如果你不知道这个问题的答案的话，这就会给面试官留下非常不好的印象。", "根据你所应聘的职位或团队的不同，你可能会有一个专门的操作系统方面的面试。在这个面试中，你会被问到一些问题，面试官通过这些问题对你对计算机操作系统机制的理解进行评估。说实话，这个面试有点让我措手不及。操作系统是我早年在大学里学过的东西，但是后来慢慢都淡忘了。", "正如我在上文中说的那样，面试本身其实就是一种技能。即使你在日常工作中已经是一名优秀的程序员，或者在你在学校的成绩非常优异，但是在面试会议室里，你的这些技能并不能按1:1 的比例方式转化为面试技能。坚持、重复地做面试准备和练习将在很大程度上决定你的面试结果。", "如果有人问我，我觉得应该关注哪些方面，我建议以下几点：", "根据你自己的时间表，越早开始越好。我面试过的很多公司都有一个 12 个月的冷却期，面试未通过的应聘者需要等到 12 个月后才能重新申请公司的职位。反过来说，如果你知道你无法在一年时间内准备好这个面试，，你不妨现在开始这个面试流程，大概感受一下面试流程具体是怎样的，到时真正面试的时候就不会那么害怕了。"], "tags": "职场,Facebook,技术面试", "url_object_id": "d536d700cabc5c76562a4106167c0110", "image_url": ["http://jbcdn2.b0.upaiyun.com/2012/11/facebook-recruitment.jpg"], "author": "Andyy Hope", "url": "http://blog.jobbole.com/112739/", "image_path": "full/a5416eef669de7d4c8e1116a909c1c7bb6330c2d.jpg"}
{"title": "netstat 的 10 个基本用法", "create_time": "2017/11/24", "praise_nums": 1, "fav_nums": 4, "comment_nums": 1, "content": ["Netstat 是一款命令行工具，可用于列出系统上所有的网络套接字连接情况，包括 tcp, udp 以及 unix 套接字，另外它还能列出处于监听状态（即等待接入请求）的套接字。如果你想确认系统上的 Web 服务有没有起来，你可以查看80端口有没有打开。以上功能使 netstat 成为网管和系统管理员的必备利器。在这篇教程中，我会列出几个例子，教大家如何使用 netstat 去查找网络连接信息和系统开启的端口号。", "以下的简单介绍来自 netstat 的 man 手册：", "第一个要介绍的，是最简单的命令：列出所有当前的连接。使用 -a 选项即可。", "上述命令列出 tcp, udp 和 unix 协议下所有套接字的所有连接。然而这些信息还不够详细，管理员往往需要查看某个协议或端口的具体连接情况。", "使用 ", " 选项列出 TCP 协议的连接：", "使用 ", " 选项列出 UDP 协议的连接：", "上面同时显示了 IPv4 和 IPv6 的连接。", "默认情况下 netstat 会通过反向域名解析技术查找每个 IP 地址对应的主机名。这会降低查找速度。如果你觉得 IP 地址已经足够，而没有必要知道主机名，就使用 ", " 选项禁用域名解析功能。", "上述命令列出所有 TCP 协议的连接，没有使用域名解析技术。So easy ? 非常好。", "任何网络服务的后台进程都会打开一个端口，用于监听接入的请求。这些正在监听的套接字也和连接的套接字一样，也能被 netstat 列出来。使用 ", " 选项列出正在监听的套接字。", "现在我们可以看到处于监听状态的 TCP 端口和连接。如果你查看所有监听端口，去掉 ", " 选项。如果你只想查看 UDP 端口，使用 ", " 选项，代替 ", " 选项。", "注意：不要使用 ", " 选项，否则 netstat 会列出所有连接，而不仅仅是监听端口。", "查看端口和连接的信息时，能查看到它们对应的进程名和进程号对系统管理员来说是非常有帮助的。举个栗子，Apache 的 httpd 服务开启80端口，如果你要查看 http 服务是否已经启动，或者 http 服务是由 apache 还是 nginx 启动的，这时候你可以看看进程名。", "使用 ", " 选项查看进程信息。", "使用 ", " 选项时，netstat 必须运行在 root 权限之下，不然它就不能得到运行在 root 权限下的进程名，而很多服务包括 http 和 ftp 都运行在 root 权限之下。", "相比进程名和进程号而言，查看进程的拥有者会更有用。使用 ", " 选项可以同时查看进程名和用户名。", "上面列出 TCP 协议下的监听套接字，同时显示进程信息和一些额外信息。", "这些额外的信息包括用户名和进程的索引节点号。这个命令对网管来说很有用。", " – 假如你将 ", " 和 ", " 选项一起使用，User 列的属性就是用户的 ID 号，而不是用户名。", "netstat 可以打印出网络统计数据，包括某个协议下的收发包数量。", "下面列出所有网络包的统计情况：", "如果想只打印出 TCP 或 UDP 协议的统计数据，只要加上对应的选项（", " 和 ", "）即可，so easy。", "使用 ", " 选项打印内核路由信息。打印出来的信息与 route 命令输出的信息一样。我们也可以使用 ", " 选项禁止域名解析。", "netstat 也能打印网络接口信息，", " 选项就是为这个功能而生。", "上面输出的信息比较原始。我们将 ", " 选项和 ", " 选项搭配使用，可以输出用户友好的信息。", "上面的输出信息与 ifconfig 输出的信息一样。", "我们可以使用 netstat 的 ", " 选项持续输出信息。", "这个命令可持续输出 TCP 协议信息。", "选项 ", " 会输出 IPv4 和 IPv6 的多播组信息。", "目前为止我们列出了 netstat 的基本用法，现在让我们一起来 geek 吧～", "active 状态的套接字连接用 “ESTABLISHED” 字段表示，所以我们可以使用 grep 命令获得 active 状态的连接：", "配合 watch 命令监视 active 状态的连接：", "如果你想看看 http,smtp 或 ntp 服务是否在运行，使用 grep。", "从这里可以看到 ntp 服务正在运行。使用 grep 命令你可以查看 http 或 smtp 或其它任何你想查看的服务。", "好了，netstat 的大部分功能都介绍过了，如果你想知道 netstat 更高级的功能，阅读它的手册吧（man netstat）。", "欢迎在下面留下你的反馈和建议。", " "], "tags": "IT技术,Linux", "url_object_id": "dd3e8438045b5ebeb69712fbb0a27663", "image_url": ["http://jbcdn2.b0.upaiyun.com/2017/11/f04af2e60786c44297a879767362ed77.png"], "author": "BinaryTides", "url": "http://blog.jobbole.com/113094/", "image_path": "full/1c25ca91e6a9ce82f4981846086888a731d7b113.jpg"}
{"title": "浅谈微服务基建的逻辑", "create_time": "2017/11/27", "praise_nums": 2, "fav_nums": 4, "comment_nums": 1, "content": [], "tags": "IT技术,微服务", "url_object_id": "6e136f448c198db45a3b7b0a5cc11600", "image_url": ["http://insights.thoughtworks.cn/wp-content/uploads/2017/11/1-bare-service.png"], "author": "伯乐在线", "url": "http://blog.jobbole.com/113082/", "image_path": "full/7352845f895555d2378204f1c4cd06143cb0f403.jpg"}
{"title": "Linux 容器 vs 虚拟机 —— 谁更胜一筹", "create_time": "2017/11/27", "praise_nums": 1, "fav_nums": 0, "comment_nums": 0, "content": ["自从Linux上的容器变得流行以来，了解Linux容器和虚拟机之间的区别变得更加棘手。本文将向您提供详细信息，以了解Linux容器和虚拟机之间的差异。", "首先要了解的有关容器和虚拟机的一个事情是，一个运用于应用程序，另一个是为操作系统设计的。这就是为什么您经常会看到一些企业应用程序运行在容器上而不是自己的虚拟机上。在虚拟机上使用容器有一些优点。", "容器最大的优点之一是可以预留比虚拟机少的资源。请记住，容器本质上是单个应用程序，而虚拟机需要更多资源来运行整个操作系统。", "如果您需要运行MySQL，NGINX或其他服务，使用容器是非常有必要。但是，如果您需要在自己的服务器上运行完整的LAMP堆栈，则运行虚拟机更好。虚拟机有着更好的灵活性，可以供您选择您的操作系统，并在您认为合适的情况下进行升级。相比之下，运行已配置应用程序容器在主机的操作系统升级方面是隔离的。", "我最喜欢使用容器的原因之一就是使用Linux库版本。例如，假设您需要Python的特定版本来开发应用程序。然后，当你在运行应用程序的盒子上更新时，突然发现Python版本发生了变化，导致应用程序无法正常工作。", "使用容器的另一个好处是你可以把一个应用程序放到一个容器中，然后在任何支持你正在运行的容器类型的操作系统上运行它。当你想要一个运行在不同Linux发行版应用程序时。通过使用容器，可以在各种不同的发行版上运行类似的应用程序环境。容器提供了可移植性。", "容器对于快速的跨发行版部署是更可行的，而虚拟机对于像运行LAMP堆栈这样的单一应用程序使用情况是更好的。", "与容器相比，虚拟机提供了更多的安全性。这并不是说容器不能被保护，而是说，默认的虚拟机提供了更大的隔离。请记住，容器可以共享系统资源而虚拟机不行。", "在运行容器时，可以采取一些措施来降低风险，包括避免超级用户权限，确保从可信来源获取容器，并且保持最新状态。有些容器是数字签名的，这有助于确定您可以从可信来源获取容器。", "最后，你需要保持容器的单一功能职责。一旦你开始在一个容器下结合软件职责，你会发现还是使用虚拟机最好。重申一下，容器是用于单一用途的应用程序，虚拟机用于多用途的应用程序。坚持这种做法，你将在安全性和整体功能方面处于更好的状况。", "无论虚拟机或容器类型如何，选择适合您需求的关键都在于研究每个选项的能力。在容器领域，Docker提供了强大的企业解决方案。这就吸引了那些关注Docker容器的公司，因为公司知道如果出现任何问题，他们可以得到他们所需要的支持。Docker是企业用户友好的选择，特别是在Docker Swarms中。而将Docker Swarms 与 Kubernetes 相比，Kubernetes在高级环境中的设置要复杂得多。", "回到虚拟机方面，我一直发现Virtualbox可以提供更好的面向桌面的虚拟机环境。而VMware在服务器方面做了各种各样的产品，VMware拥有从存储到云服务器解决方案的各种虚拟机解决方案，还有其他选择（各种管理程序等）。但我认为VirtualBox和VMware很好地代表了桌面到服务器虚拟化的两个领域。", "在决定容器还是虚拟机之前，请考虑以下事项。如果你选择容器，但你完全可以在虚拟机上运行容器。了解这一点很重要，因为这里没有明显的赢家或输家。事实上，这两种技术的需求完全不同。", "容器将引起媒体的持续关注，因为它们让用户用更少的硬件更高效地运行。在另一方面，虚拟机仍然是服务器和云空间的主要内容。", "我认为值得一看的是Kubernetes和Docker Swar之间的事情。我认为看看这两种容器管理技术是如何发挥作用的，以及哪种技术会成为标准。有一段时间，感觉好像是Docker。然而现在，Kubernetes占据了更多的营地。可能随着时间的推移，我们将开始看到Kubernetes成为头条新闻，并成为容器阵营的头号人物。", "你相信容器正在超越虚拟机吗？也许相反，你认为未来这两种技术将会结合？无论如何，请点击评论，让我们听听您的观点。无论如何，不管你是运行一个复杂的容器，还是运用虚拟机，我都想听听你对他们的看法。"], "tags": "IT技术,Linux,VM,容器", "url_object_id": "acaa12f5ae1c32af3646d7eac821ccbc", "image_url": ["http://jbcdn2.b0.upaiyun.com/2014/04/e260ae4f5d153b25be87819b25ff0577.jpg"], "author": "datamation", "url": "http://blog.jobbole.com/113114/", "image_path": "full/6085acc0af4696f5d49164561c6bc4f9b590fc26.jpg"}
{"title": "成为 Linux 终端高手的七种武器", "create_time": "2017/11/28", "praise_nums": 1, "fav_nums": 2, "comment_nums": 1, "content": ["Linux 终端不仅是一个键入命令的地方。如若你能熟谙这些基础技巧，那么你会在绝大多数 Linux 发行版的默认使用的 Bash shell中游刃有余。", "这是howtogeek.com 网站特供给初级用户升级打怪时不能忘记携带的七种武器——", "这样能节省时间，并且对于输入那些你不很确定其具体名称的文件和命令来说很方便。比如，当前目录下有一个名为“really long file name”的文件，你想要删除它。你可以输入完整的文件名，但是你必须确保正确地输入了空格和每个字母。若当前目录下还有许多以字母“r”开头的文件，(如果你没有正确地输入字符) Bash 将不知道你想要删除哪一个文件。", "如果在当前目录下存在着另一个名为“really very long file name”的文件，你敲击了Tab键。Bash 将为所有以“r”开头的文件自动补充“really\\ ”部分。此时继续敲击Tab键，你将得到匹配所有文件名的列表。", "这种机制允许你把一条命令的输出传送到另一条命令。按照 UNIX 哲学，每个程序都足够小，只做一件事并将之做到最好。例如，ls命令列出当前目录下的所有文件，grep命令搜索输入其中的指定检索项。", "你可以通过管道机制（|字符）把二者结合起来，在当前目录下搜索文件。以下给出的命令（在当前文件夹下）搜索关键字为“word”的文件：", "“*”（星号）字符是一种匹配任意长度字符的通配符。比如，你想删除当前文件夹下名为“really long file name”和“really very long file name”的两个文件，你可以运行以下命令：", "这条命令会删除所有以“really”开头以“name”结尾的文件。但是，如果你运行的是 rm * 这条命令，你将会删除文件夹下的所有文件。（译注：使用通配符时要小心，尤其是你的rm没有-f确认时！）", "“>”字符可以把一条命令的输出重定向到一个文件或另一条命令。比如，下面这行命令执行完 ls 后会列出当前文件夹下的所有文件，其结果不是在终端显示，而是输出到当前文件夹下一个名为“file1”的文件中去:", "Bash 能记住你以前输入过的命令，上、下方向键可以逐行调出它们。使用 history 命令打印历史记录，以管道机制 grep 选择性地输出你想要的结果。", "“~”，也叫做波浪符，用来表示当前用户的主目录。相比通过 cd /home/name 到达你的主目录，你可以输入 cd ~ 来达到相同效果。这点也可以在相关路径上使用：比如 cd ~/Desktop 能够到达当前用户的 Desktop 目录。", "同样，“.”代表当前目录，“..”代表当前目录的父目录。使用 cd .. 可以返回上一级目录。它们也可以用在相关路径上，举例说明：你当前处在 Desktop 文件夹下，通过 cd ../Documents 命令，你可以转到与 Desktop 共有同一父文件夹的 Documents 文件夹去。", "（译注：“-”代表前一个目录，cd – 可以返回到前一个工作目录。）", "Bash 默认情况下会在当前终端下执行你键入的每条命令。通常这样是没有问题的，但是如果你想要在启动某个应用后继续使用终端呢？通过输入 firefox 启动火狐浏览器，你的终端将被错误提示等各种信息输出占据，直到你关闭火狐浏览器为止。在 Bash 中你可以通过在命令结尾添加“&”操作符来后台执行程序。", "Bash 也可以连续执行两条命令。 第二条命令仅在第一条命令成功执行后才会开始执行。如要如此，你可以通过键入“&&”，也就是两个“&”字符进行分隔，在同一行输入两条命令。下面给出的命令会在等待 5 秒后运行 gnome-screenshot 工具:", " "], "tags": "IT技术,Linux", "url_object_id": "5b177b5459f12c0388d146c97af8177d", "image_url": ["http://jbcdn2.b0.upaiyun.com/2017/05/77d80105fd15f2465894827e23cc4842.jpeg"], "author": "efytimes", "url": "http://blog.jobbole.com/113127/", "image_path": "full/d1b17b98748a74826464a08e6d30a4ee1b15b171.jpg"}
{"title": "为什么我讨厌开放式办公？", "create_time": "2017/11/28", "praise_nums": 1, "fav_nums": 1, "comment_nums": 7, "content": ["在我最近这份工作中，最好的作品都是在家完成的。我会尽可能避免在办公室工作。在家里，我拥有两张桌子和工作环境的完全控制权。无论是分心还是休息，都是我自己的选择，而不取决于外部因素。", "我的家庭办公室是保护生产力的堡垒", "一旦我去了办公室，环境就都变了。总是有各种事物不停地使我分心：同事们、狗叫声（声明一点：狗狗很可爱）、临时会议、生日庆祝等等。这让我很难达到“", "”（flow states: 将个人精力完全投注在某件事上），即使达到了，也很容易被打破。在我可以工作的所有场所中，办公室的桌子往往是最坏的一个选择。", "当我身处一个拥挤的空间，我的思维也变得拥挤了。我会不知所措，有种无法逃离的感觉。与之相反，如果我拥有精神和身体上的空间，我就能理解并挑战我的思维，思维质量也会大大提升。", "我意识到自己有点讨厌开放式办公。", "理论上听起来是不错，大家都在同一个办公室里，不仅可以动态优化工作，还能极大地受益于协同作用。营销人员和设计师可以在“臭鼬工厂”项目（skunk works：指高级开发项目）中并肩工作，工程师和产品能瞬间提出并解决问题和bug，沟通可以在各个部门之间自然地进行。", "都有开放办公的计划。传统公司也在朝这个方向发展，以期像那些酷酷的创业公司一样，为办公室注入更多创造力。", "挺有道理的哈？但是有一个大问题：", "在阐述理由之前，我想说，我本人就是开放式办公的一大问题。我性格外向，如果让我在思考深入且复杂的问题和跟同事侃大山之中选一个，我肯定选后者。在这方面，", "。", "开放式办公环境中的人在", "上都受到了影响。一项Oil & Gas公司在1997年的调查中显示：", "和常规办公室相比，开放式办公的员工要经历更多不受控制的互动，更高的压力和更低的注意力和动力。研究也表明，开放式办公通常会", "。", "Facebook的开放式办公使人感觉缺少了隐私空间", "虽然之前研究人员声称分享工作空间能提升社交支持、人与人之间的交流和合作，但是我们的研究结果表明，跟那些有自己的办公室的人，或者只和一两个人共享办公室的人相比，开放式办公同事之间的友谊质量是最低的。", "开放式办公会不可避免地增加噪音，被视为生产力和专注力的一大障碍。物理上的分隔也可以给人一种隐私的感觉——办公室里", "。", "开放式办公室是很差的结构。它在设计和心理上都表现出了同样的失败。为了理解为什么开放式办公如此普遍，我们必须了解基本的心理学和理论基础。", "下面概述了开放式办公最常见的论点：", "开放式办公也给员工们一种认知，那就是他们一直在主动或被动地被监视着，这能鼓励员工们看起来很忙碌且富有成效。", "我们看起来更忙了，但是实际上效率更低，要请更多的病假，沟通和快乐的心情都被毁了，这不是什么聪明的交易。", "我们应该努力为有意义的工作创造更好的环境。 关于这点有许多概念，我的最爱的包括：", "两全其美的选择，轮辐式空间的特点是有一个进入公共空间和走廊的入口，可以与不同的个人办公室对接。", "人们可以选择一起工作或在自己的办公室里独自工作。 “轮子”中心和“辐条”有大型的公共空间和走廊需要通行，鼓励了同行时的对话。", "MIT 20号楼空中视角/所有的办公室和一个中心入口", "MIT 20号楼是轮辐式模型的一个著名例子。20号楼因为促成了很多有创意的想法而闻名。这其中有一部分要归功于建筑的独特结构。", "，而不是几个人一起坐在三角椅上想出来的。", "极乐机（", "）", "Eudaimonia 在希腊语中是“可以发挥人全部潜能的状态”的意思。我在Cal Newport的", "（《深度工作》）中得知了极乐机（由David Dewane独创的成果）。", "极乐机由五个房间组成，每个房间都比前一个房间更适于专注的工作。", "陈列室", "从街上走进的第一个房间是陈列室。在", "的设计中，这个房间会展示这座建筑中产出深度工作。它的目的是激励当中的“用户”，创造健康压力和同伴压力文化。", "沙龙", "沙龙的设计目的是创造一种“在强烈的好奇和争论之间盘旋”的气氛。这是个供人争论、“孵化”想法的地方，可以把日常的工作想法想得更深远。", "极乐机结构简图", "图书馆", "走出大厅，就进入图书馆了。这个空间永久保存着这台机器中产出的所有工作成果，和用于从前工作的书籍和资源。", "办公空间", "下一个房间是办公空间。其中包括一个标准会议室，里面有一块白板，还有一些带桌子的隔间。“办公区是为低强度活动设置的”Dewane解释道。", "工作室", "现在到了机器中的最后一个空间了，有多个被Dewane称为“深度工作室”的房间。“每个工作间的规格大约是六英尺乘十英尺（一英尺约为0.3米），被厚厚的隔音墙围住……”深入工作间的目的是使员工能全身心投入工作，不受打扰。", "这里有关于极乐机的", "。虽然相较概念，这个品牌可能更有名一些，但是我是这个概念的忠实粉丝。", "也许你在一家很独断的创业公司工作，或者你的情况不允许你对工作环境和结构做调整。不能掌控你的工作环境会让工作更难完成。", "迪伦·托马斯（Dylan Thomas）在威尔士拉恩镇的写作小屋", "找到属于你的“作家的小屋”，看看在哪里你能认真地，不受打扰地工作，可以是咖啡厅、图书馆或者", "。你的“小屋”是你能做好工作的地方。", "对自己进行审查，找出你何时最有效率，最能达到神驰状态。这种审查很有帮助，因为我们做事经常看起来合乎逻辑，而实际上适得其反。查看工作产出这件事非常值得你为之付出一些时间。", "在开放式办公环境中，你有做出你最好的工作成果吗？"], "tags": "职场,职场", "url_object_id": "499f1818f182ab7b7dc4ef8edaa89386", "image_url": ["http://wx4.sinaimg.cn/mw690/7cc829d3gy1flxjgvjhbrj21jk0qn127.jpg"], "author": "伯乐在线", "url": "http://blog.jobbole.com/113099/", "image_path": "full/e64df6109ee524641582e16bbaad62524864ccc8.jpg"}
{"title": "5 款最酷的 Linux 终端模拟器", "create_time": "2017/11/27", "praise_nums": 1, "fav_nums": 0, "comment_nums": 0, "content": ["虽然，我们可以继续使用老旧的 GNOME 终端、Konsole，以及好笑而孱弱的旧式 xterm。 不过，让我们带着尝试某种新东西的心境，回过头来看看 5 款酷炫并且实用的 Linux 终端。", "首先我要推荐的第一个终端是 ", "。 Xiki 是 Craig Muth 的智慧结晶，他是一个天才程序员，也是一个有趣的人（有趣在此处的意思是幽默，可能还有其它的意思）。 很久以前我在 ", " 一文中介绍过 Xiki。 Xiki 不仅仅是又一款终端模拟器；它也是一个扩展命令行用途、加快命令行速度的交互式环境。", "Xiki 支持鼠标，并且在绝大多数命令行 Shell 上都支持。 它有大量的屏显帮助，而且可以使用鼠标和键盘快速导航。 它体现在速度上的一个简单例子就是增强了 ", " 命令。 Xiki 可以快速穿过文件系统上的多层目录，而不用持续的重复输入 ", " 或者 ", "， 或者利用那些巧妙的正则表达式。", "Xiki 可以与许多文本编辑器相集成， 提供了一个永久的便签， 有一个快速搜索引擎， 同时像他们所说的，还有许许多多的功能。 Xiki 是如此的有特色、如此的不同， 所以学习和了解它的最快的方式可以看 ", "。", "我推荐 ", "  主要因为它的外观，以及它的实用性。 它将我们带回了阴极射线管显示器的时代，这不算很久以前，而我也没有怀旧的意思，我死也不会放弃我的 LCD 屏幕。它基于 ", "， 因此有着 Konsole 的优秀功能。可以通过 Cool Retro Term 的配置文件菜单来改变它的外观。配置文件包括 Amber、Green、Pixelated、Apple 和 Transparent Green 等等，而且全都包括一个像真的一样的扫描线。并不是全都是有用的，例如 Vintage 配置文件看起来就像一个闪烁着的老旧的球面屏。", "Cool Retro Term 的 GitHub 仓库有着详细的安装指南，且 Ubuntu 用户有 ", "。", "你要是想要一个优秀的轻量级、易配置的终端，可以尝试下 ", "（图 1）。 它依赖少，不像 GNOME 终端 和 Konsole，在 GNOME 和 KDE 中牵扯了很多组件。其大多数选项是可以通过右键菜单配置的，例如选项卡的标签、 颜色、大小、选项卡的默认数量、字体、铃声，以及光标类型。 你可以在你个人的配置文件 ", " 里面设置更多的选项，例如绑定快捷键。", "命令行选项详见 ", "。可以使用这些来从命令行启动 sakura，或者在你的图形启动器上使用它们。 例如，打开 4 个选项卡并设置窗口标题为 “MyWindowTitle”：", " 来自 Enlightenment 图形环境的郁葱可爱的世界，它能够被美化成任何你所想要的样子 (图 2)。 它有许多有用的功能：独立的拆分窗口、打开文件和 URL、文件图标、选项卡，林林总总。 它甚至能运行在没有图形界面的 Linux 控制台上。", "当你打开多个拆分窗口时，每个窗口都能设置不同的背景，并且背景文件可以是任意媒体文件：图像文件、视频或者音乐文件。它带有一堆便于清晰可读的暗色主题和透明主题，它甚至一个 Nyan 猫主题。它没有滚动条，因此需要使用组合键 ", " 和 ", " 进行上下导航。", "它有多个控件：一个右键单击菜单，上下文对话框，以及命令行选项。右键单击菜单里包含世界上最小的字体，且 Miniview 可显示一个微观的文件树，但我没有找到可以使它们易于辨读的选项。当你打开多个标签时，可以点击小标签浏览器来打开一个可以上下滚动的选择器。任何东西都是可配置的；通过 ", " 可以查看一系列的命令和选项，包括一批不错的快捷键快捷方式。奇怪的是，帮助里面没有包括以下命令，这是我偶然发现的：", "使用 ", " 命令来设置背景，不带参数的 ", " 命令来移除背景。 运行 ", " 来打开文件。 ", " 命令以图标视图列出文件。 加上 ", " 选项运行这些命令可以了解它们是干什么的。 即使有可读性的怪癖，Terminology 依然是快速、漂亮和实用的。", "已经有几个优秀的下拉式终端模拟器，包括 Guake 和 Yakuake。 ", " (图 3) 是其中最简单和轻量级的一个。 打开 Tilda 后它会保持打开状态， 你可以通过快捷键来显示和隐藏它。 Tilda 快捷键是默认设置的， 你可以设置自己喜欢的快捷键。 它一直打开着的，随时准备工作，但是直到你需要它的时候才会出现。", "Tilda 选项方面有很好的补充，包括默认的大小、位置、外观、绑定键、搜索条、鼠标动作，以及标签条。 这些都被右键单击菜单控制。"], "tags": "IT技术,Linux", "url_object_id": "71754c69c41b20b379b2bc4a00851aee", "image_url": ["http://jbcdn2.b0.upaiyun.com/2017/05/77d80105fd15f2465894827e23cc4842.jpeg"], "author": "Carla Schroder", "url": "http://blog.jobbole.com/113109/", "image_path": "full/d1b17b98748a74826464a08e6d30a4ee1b15b171.jpg"}
{"title": "硬盘又坏了？硬盘数据恢复的神器有这些", "create_time": "2017/11/29", "praise_nums": 1, "fav_nums": 6, "comment_nums": 1, "content": ["在一切工作进行之前，请先判断硬盘是否有损坏，以及缺损类型，而往往硬盘出现问题主要集中下以下两个方面：", "数据修复工具TestDisk能够修复启动分区，恢复一个分区或者删除数据，从无法访问的部分复制文件，还能轻松修复分区表。这款工具可用于诸如FAT、exFAT、NTFS和ext2等不同文件格式。", "注：TestDisk与一款PhotoRec的应用程序相捆绑。现在，想要恢复照片、视频及文件仅仅需要点击几下就能搞定了。扫描超出了文件系统进行了延展，可以对与丢失文件相关的数据块（集群）进行彻底检查。", "当你开始启动TestDisk时，会收到你是否需要一个日志文件的提示。你会看到一个可以进行挑选的分区列表。它可以帮助应用程序在读取磁盘分区时选择正确的签名。在执行操作之前，软件会提示你有哪些可用的硬盘分区，然后让你选择。", "EaseUs是硬盘恢复数据的另一个好帮手。它是最优秀的分区管理者，你可以对分区进行移动、合并甚至是拆分。你还可以进行磁盘转换，恢复已删除或者丢失的分区，检测分区发现错误，OS到HDD/SSD的迁移，同时还可以进行磁盘碎片处理。使用EaseUS Partition Master Free工具，你可以用菜单（顶部）或者左侧窗格的操作对选中分区进行处理。", "WinDirStat是一款用于磁盘清理后的理想恢复工具。它让磁盘数据分布变得可视化，同时还对占用大部分空间的数据类型进行了定义。你启动了应用程序之后，这个工具生成了文件的一个树状视图，你可以选择驱动器进行分析。通过单击图形内部框，你将可以在树状视图中查看到正被搜索的文件。", "这个用于硬盘恢复的工具名为CloneZilla。如果你必须对硬盘进行映像和克隆，那最好的选择就是CloneZilla。它既是一个独立工具，它还能与Parted magic绑定使用。CloneZilla分为两种：CloneZilla Live和CloneZilla SE（服务器版）。后者是Linux专用工具，能够安装并进行配置通过网络给多个客户端发送邮件。CloneZilla Live是Linux专用的可引导分布区，可以进行单个设备的克隆。", "OSFMount 是一个支持光盘镜像和内存虚拟盘创建装载实用小工具。OSFMount这个软件特色在于，既可以加载光盘镜像，也可以创建内存虚拟盘。OSFMount 还支持创建RAM 磁盘分区，也就是能够在内存中分割出一块地方虚拟成硬盘空间，这个空间速度将会非常快，对于需要高速读取磁盘的应用程序、数据库、浏览器缓存或者游戏而言，这个功能显得非常重要。第二个好处是安全，磁盘内容全在内存中，系统一关闭内容便会消失。", "一旦你启动了OSFMount，单击Flie（文件）并选择Mount新的虚拟磁盘。但是你必须确保勾选了“Read Only Drive”选项，以阻止近期装在的图片覆盖数据的风险。", "Defraggler 是一个轻量级的整理工具，但它可以快速高效的整理某个磁盘、文件夹甚至一个文件。也可以对硬盘进行查错，类似 Windows 的 Check Disk 命令。Defraggler还拥有了像“WinContig”的“整理指定文件/文件夹”碎片的功能。这也正是它最具有特色的地方了。我们可以在Defraggler里查看单一文件的磁盘碎片情形。完成分析之后，你可以使用驱动器映射查看零碎的文件。", "SSDLife free是一款SSD检测工具。该检测工具是一款在Windows系统下使用的免费软件，利用SSDLife free，可以检测到SSD的使用时间，”健康”资料以及其余命；如果联网将SSD的资料送到指定服务器的话，还可以从网页上观看到SSD的S.M.A.R.T.数据。", "注：每个SSD制造商都有专有SSD管理软件，例如英特尔SSD工具箱可以生成健康状况，并为驱动器提供详细信息。", "Recuva（数据恢复软件）是一款功能非常强大的数据恢复软件，支持Windwos系列所有操作系统，支持NTFS、Fat32、exFat等文件系统上的数据恢复。Recuva能够有效地恢复误删除、误格式化的文件，支持恢复电脑硬盘、U盘、移动硬盘等存储设备上的文件。它能很方便的让你恢复想要恢复的内容。当然，不过你不喜欢在一步一步的指导下使用软件，你也可以跳过向导，直接使用这个程序。", "在使用Recuva时，系统会提示你需要启动扫描，然后你要从右侧的菜单中选择要恢复的文件类型，并选择过滤选项的标准。你还可以用过滤选项对指定元素进行扫描（添加或者移除文件类型）。你还可以启用深层扫描代替快读扫描。你还能修改查看模式，并控制覆盖方式让数据安全恢复。", "HD Tune是一款小巧易用的硬盘工具软件，其主要功能有硬盘传输速率检测，健康状态检测，温度检测及磁盘表面扫描存取时间、CPU占用率。另外，还能检测出硬盘的固件版本、序列号、容量、缓存大小以及当前的Ultra DMA模式等。虽然这些功能其它软件也有，但难能可贵的是此软件把所有这些功能集于一身，而且非常小巧，速度又快，更重要的是它是免费软件，可以自由使用。", "使用Disk2vhd创建虚拟硬盘很方便。从live机器上创建虚拟磁盘，与Microsoft Virtual PC和Microsoft Hyper-V一起使用时很好的选择。你可以很轻松地在虚拟环境里模拟一个live环境以提高测试效率，或者你也可以为live环境创建一个虚拟备份以备后用。", "Disk2vhd用起来很简单，你就是要输入要保存的VHD文件的文件名和保存位置，还要指定要包含的卷，然后点击“创建”。你也可以通过Disk2vhd内置的命令行选项来创建。"], "tags": "IT技术,数据恢复", "url_object_id": "c182eaa7824072e58f8c19f872a83f03", "image_url": ["http://jbcdn2.b0.upaiyun.com/2017/11/62584016a56e76b8403bbbfdb8feaec9.jpg"], "author": "magazine8", "url": "http://blog.jobbole.com/113133/", "image_path": "full/f95e08dd3d51965b10609d97356841122070a18b.jpg"}
{"title": "我问每个面试官的两个问题，把工程流程用到软件面试", "create_time": "2017/11/29", "praise_nums": 2, "fav_nums": 1, "comment_nums": 0, "content": ["我最近一直在进行软件工程师面试。面试开始时，我都会问面试官两个问题，但至今没有得到令我满意的回答：", "面试官的回答多种多样，只有极少数会说「其实我也不知道我们在寻找什么样的人」。他们大部分人的看法，在我看来，都属于以下几种：", "在我接受面试的公司中，只有不到 10% 说：他们进行面试是为了评估候选人", "在我看来这点很荒谬：“适合的”招聘策略以及招聘“最好的”人才，这两点筛选过滤掉了许多人才，但这是却基于面试官的偏见，而不是候选人的能力。", "如果你将评估候选人的工作能力看作是面试的重点，那么这也揭示了现在诸多技术面试的不足之处。我本人从未在面试中，接受过团队任务或优先级任务方面的能力评估，相对于在 O(n) 时间内找到回文词（anagram）这样的技术评估，这两项能力可能对软件工程师的工作", "。", "面对我的这个问题，大多数公司的答案是“我们不评估”。", "如果你正在优化一个项目，而你的成功标准却是“我不知道（标准），但我做了一些改变，结果似乎看起来更好了，”相信我，走出房间后你一定会被人耻笑的。然而，这点在招聘过程中似乎是可以被接受的。尽管在创业初期，团队获得的口头承诺是特别重要的一部分，但大多数公司似乎都忽视了其招聘环节，几乎没有人将工程流程应用于招聘中。", "要将工程流程应用到招聘中，第一步是评估你目前拥有的员工，你可以问问自己：目前表现最好的员工是面试过程中表现最好的员工吗？如果不是，原因是什么？大多数公司都会进行绩效考核，也会保留当初面试的材料和相关数据，但很少会有公司将这些结合起来，以改进他们目前的面试过程。", "这样做总比什么都没做要好，但是你仍忽略了问题的另一半：那些你面试中过滤掉的人哪？", "人们常说，", "，但我不同意，在我看来它并没有道理。我经常听说，那些顶级公司缺少并渴求有才能的开发人员，而人才市场上却几乎找不到这类人，但也正是这些顶级公司，因为嫌弃候选人的学历或资历不足，或是没有通过白板测试等这个那个的原因，拒绝刷掉了一大批人，其中就有它们想要的人才。这听上去很讽刺，不是吗？即使你认为缩小（已经很小的）人才范围，仍比招错人的风险要小，你至少应该确保，一开始选定的范围是正确的。", "这是一个非常艰难的问题：如果你能获得一些信息，它们足以改变你对候选人最初的看法，那么你应该先雇佣他们。好吧，这是个悖论~ 但我们仍然可以尝试缓解这个问题：", "如果你想改变面试流程，可以先在现有员工身上尝试。如果有人没有通过面试，你应该问问自己，是否应该要解雇他。当然，你可能不会这么做。", "我听说有一些公司是这么做的，但我认为，绝大多数公司都不会这样尝试。", "要确定认当前招聘策略是否有效的方法之一，就是深入了解一些被你拒绝的候选人，并判断拒绝他们是否是正确决定。", "但这存在一些问题：", "尽管依然存在着问题，但我认为它对一些公司来说仍是一个好策略，特别是那些申请者数量较少的公司。", "在现场面试中，这么做一定是可行的。简历则很难适用，因为存在着很多不合格的候选人，但我认为这个策略可能还是有用的。", "在面试过程中，大多数公司似乎都是盲目的。我发现，有些招聘人员和招聘经理甚至不知道他们在找什么样的人才，而且几乎没有人尝试更新和优化面试过程。", "在少数几个关注评估面试流程的公司中，大多数关注的是找到验证候选人好坏的方法，而不是改变现有的面试流程，让那些容易在“典型面试”中淘汰的优秀人才得以通过面试。（注3：Matasano 从那些在“传统面试”中淘汰的人才那里，吸取经验教训，获得了极大的成功。）", "如果你正在（作为面试官）为你的公司进行面试，我很乐意听到你的看法！如果你正在（作为候选人）接受面试，我强烈建议你向面试的公司提出这些问题，以此来看看它们对此的反应，这会非常具有启发性。"], "tags": "职场,技术面试,面试", "url_object_id": "e7a6e5d4aa151c1ce783e4c76522d7ea", "image_url": ["http://wx2.sinaimg.cn/mw690/7cc829d3gy1flxwcxaj8fj20m80eqdij.jpg"], "author": "伯乐在线", "url": "http://blog.jobbole.com/113120/", "image_path": "full/12b9aed2f37016dbd6259925e5ef6d316c6e0411.jpg"}
{"title": "如何处理前任程序员留下的代码", "create_time": "2017/11/28", "praise_nums": 1, "fav_nums": 3, "comment_nums": 2, "content": ["身为一个软件工程师，我们不可避免的会遇到这样一些问题：不得不修改别人的代码，或者在别人的代码中添加新的功能。我们并不熟悉这些代码，它也可能在整个系统中与我们编写的部分无关。虽然这样的工作很困难，容易让人感到无奈，但是要达到足够的灵活性来也别的开发者一起编写代码，收获也蛮大的。这些收获包括提高影响力，修复烂软件，还能学到系统中以前并不了解的部分（还可以从其它程序员那里学到技术和技巧）。", "在其它开发者的代码中工作时，既会感到郁闷，又会从中有益，考虑到这些因素，我们必须警惕一些极其容易出错的地方：", "所有开发人员，包括我们自己，都是人。因此在别人编写的代码上工作，会受到人性的影响。在本文中，我们会讲述五种方法，利用人性的优点，从现有代码和原作者身上取得尽可能多的收获，并改善代码既有的状态。虽然这个清单并不全面，但应用这些方法将确保我们在完成对别人代码的修改工作后，会有信心保持现有功能的工作状态，同时又能保证新功能融合在现有代码中。", "对于别的开发人员写出来的功能，它确实如预期一样工作吗？我们所做的修改是否会妨碍它按照预期工作？对此，唯一能让人产生信心完成前述问题的方式就是，用测试来支持代码。我们在阅读别人的代码时，会发现两种可能的状态：(1) 没有达到足够水平的测试，或者 (2) 有达到足够水平的测试。对于前者，我们会陷入创建测试的困境；而对于后者，我们可以使用现有的测试来确保我们所做的修改不会破解原来的代码，同时也能从测试中大量地了解到代码的意图。", "这听起来可能很惨：我们在更改另一个开发人员的代码时，要对我们的行为负责，但我们无法保证更改是否会造成破坏。", "。不管我们发现代码是什么状态，只要动了代码，就得对其负责。因此，我们应该在修改代码的时候控制自己的行为。如果不想造成破坏，那就自己写测试。", "这很枯燥，但我们可以通过编写测试来了解代码，这也是它的主要优点。假如现在的代码工作良好，我们需要编写测试，使其在获得预期输入的情况下产生预期的输出。在写测试的过程中，我们会逐渐了解代码的意图和功能。比如，存在如下代码", "我们对其功能和代码中使用的魔法数字[译者注：指直接的数字常量]并不了解，但我们可以创建一组测试，根据已知的输入产生已知的输出。比如，通过简单的数学运算分析成功人士的薪资。我们发现如果 30 岁以下的人每年挣大约 $68,330，就会被认为是成功的（按代码中的标准）。虽然我们不知道那些魔法数字是什么意思，但我们知道它们会减少原始薪资。这样，$68,330 这个阈值是扣除前的基本薪资。使用这些信息，我们可以创建一些简单的测试，如下：", "通过这三个测试，我们已经对当前代码的工作方式了有大致了解：如果一个人不到 30 岁，每年能挣 $68,300，他就被认为是成功的。我们可以创建更多测试来确保功能在边缘情况（比如没有年龄或薪资）下的正确性。而且建成一套自动化测试之后，它可以用以确保我们对现有代码的修改不会破坏现有的功能。", "在现有代码中存在足够测试的情况下，我们也可以从测试中了解不少东西。就像我们创建测试一样，我们可以通过阅读测试从功能级别来了解代码是如何工作的。另外，我们也可以了解到", "所理解的代码功能。就算测试不是原作者，而是其他人（在我们之前）写的，它仍然可以向我们提供其他人对代码意图的理解。", "即使现在的测试很有帮助，我们仍然要保持谨慎。我们很难判断测试是否和代码的变化保持一致。如果一致，我们就拥有理解代码的坚实基础；如果不一致，我们就必须小心不要被误导。比如，如果原薪资阈值是每年 $75,000，后来改为我们知道的 $68,330，那么这个过时的测试可能会把我们引入歧途：", "这个测试仍然会通过，但不是预期的效果。它能通过不是因为", "阈值，而是因为它超过了阈值。如果这个测试集中包括一个测试用例，其薪资只比阈值少 $1 时返回 false，那么第二个测试会失败，这表示阈值是错误的。如果套件没有这样的测试，那么旧的数据很容易对我们了解代码的实际意图产生误导。当存在疑问的时候，请相信代码：正如我们前端所展示的，解决阈值的问题表明测试并未针对", "阈值。", "此外，参考代码库日志（比如 Git 日志）来了解代码和测试用例：如果最后更新代码的时间比最后更新测试的时间要新得多（并且代码中存在重大的代码，比如修改阈值），那么测试可能已经过时，需要谨慎对待。注意，不要完全忽略它们，因为它们还可能为我们提供一些原作者（或最近编写测试的开发者）的资料，不它们可能包含过时或错误的数据。", "在任何涉及多个人的工作中，沟通都至关重要。无论是在公司中、越野旅行中或是在项目中，缺少沟通都极易产生严重后果。尽管我们在创建新代码的时候进行沟通，但当我们接触既存代码时，风险还是会增加。因为我们对既存代码的了解有限，我们所了解的东西有可能受到了误导，也有可能过于片面，因此，为了真正理解现有的代码，我们需要与编写它的人交谈。", "在问问题的时候，我们要确保问题是有针对性的，能达到我们理解代码的目的。比如：", "保持谦卑，从原作者那里寻找答案。几乎每个开发者都出现过这样的场景，他/她在那里看着别人的代码，问自己“他/她为什么要那样做？他们为什么不", "做？”然后花几个小时来得出本来只要原作者回答就能得到的结论。多数开发者都有能干的程序员，所以最好是假设我们看似糟糕的决定背后有个合理的理由（也可能没有，但在看别人代码的时候最好假设他有不错的理由；如果确实没有，我们可以通过重构来修改）。", "软件开发中，沟通也存在一定的副作用。康威定律，这个最初于 1967 年由 Melvin Conway 提出的定律：", "也就是说，一个大团队紧密沟通，就有可能产生整体的、紧密耦合的代码，而一组相对较小的团队可能会产生更多独立、松耦合的代码（更多相关信息，请阅读", "）。对于我们来说，我们的通信结构不仅影响我们某段代码，还会影响整个代码库。因此，与原作者保持紧密的沟通是一个好办法，但我们应该避免过于依赖原作者。过分依赖会让原作者感厌烦，也可能在代码中产生不可预料的耦合。", "虽然这可能有助于深入研究我们的代码，但这是我们假设可以接触原作者的情况下。在很多时候，原作者可能已离开公司，或者不在身边的（例如休假）。我们在这种情况下要做什么呢？ 询问可能对此代码有想法的人。这并不一定是一个真正从事编码工作的人，但也可能是周围的某人或熟悉编写代码之人的人。只要从原作者身上得到哪怕一个想法，也有可能揭示一些代码中的未知片段。", "在心理学上有一个著名的概念叫“破窗理论”，这个理论由 Andrew Hunt 和 Dave Thomas 在", "（4-6页）揭示。这一理论，最初发展自 James Q. Wilson 和 George L. Kelling：", "这一理论认为，人性会放弃照管某个似乎已经无人照管的事务。比如，人们更容易去破坏显得凌乱的建筑。就软件而言，如果开发人员发现代码已经是一团糟，那么继续搞乱就很正常。从本质上来说，我们对自己说（尽管字不太多），“如果前任都不在乎，我为什么要在乎？”或者“我搞乱的东西会被隐藏在这个烂摊子下面”。", "不过，这不应该成为我们的借口。我们应该停止推卸负责。一旦我们接触到他人留下的代码，就要对它负责，如果它出现问题，我们就得接受责问。为了确保我们能战胜这一人性发展的必须趋势，我们需要小步前进，逐步改善代码的凌乱状况（更换坏掉的窗户）。", "有一个简单的方法是去掉整个包或模块中的所有警告，删除掉未使用或注释掉的代码。如果我们以后需要这些代码，可以从代码库之前的提交中找到它。如果存在不能解决的警告（如原始类型警告），对方法或者其调用添加 @SuppressWarnings 注解。这确保我们对代码进行了深思熟虑：它们不是因为疏忽造成的警告，而是已经注意到的警告（比如原始类型）。", "一旦我们删除或明确禁止所有警告，我们必须确保代码保持无警告状态。这有两个主要的含义：", "这对他人或我们自己都有心理暗示作用，即我们是真的关心我们正在处理的代码。这不再是一个集合空间，其中我们盲目做出修改，提交，过后不再查看。相反，我们要对此代码的责任慎重一些。这也有助于未来的发展，向未来的开发者展示：这不是一个破窗的仓库：它是一个维护良好的代码库。", "在过去几十年中，重构已经发展成为一个非常强大的述语，近年来它成为了变更工作代码的同义词。尽管重构确实涉及到对工作代码的修改，但这并不是它的完整意义。Martin Fowlerd 在它的开创性著作《", "》中将重构定义为：", "这个定义的关键在于它涉及的变化并不会改变系统的", "。也就是说，我们在重构代码的时候，必须保证代码对外部可见的行为不会发生变化。在我们的示例中就是指我们自己修改或创建的测试集。为了保证我们没有改变系统的外部行为，每次改变我们都应该重新编译并完整地进行测试。", "此外，并非我们所做的每一次修改都可以被认为是重构。比如，重命名一个方法使其更好的反映其用途是一种重构，它加入了新功能就不是。为了看到重构的好处，我们会重构 SuccessfulFilter。我们首先要使用", "这一重构手段来更好的封装计算个人净薪资的逻辑：", "做出这个修改之后，重新编译并运行测试集，保持通过。现在的代码已经很容易看到成功的依据是年龄和净薪资，但是 getNetSalary 方法似乎并不属于 SuccessfulFilter，它应该是 Person 类（这样说是因为这个方法的唯一参数是 Person 对象，也只调用了 Person 的方法，所以它更接近 Person）。为了更好的放置这个方法，我们使用", "将它移动到 Person 类。", "为了进一步清理这段代码，我们对魔法数字分别执行", "。为了找到每一个值的含义，我们可能要与原作者或者有足够相关领域知识的人交谈，以获得正确的结果。我们还会多次执行", "重构以确保现在的方法尽可能简单。", "重新编译，然后测试，发现系统仍然如预期运行：我们没有改变外部行为，但我们已经改善了代码的内部结构和可靠性。想了解更多更复杂的重构方法和重构过程，请阅读 Martin Fowler 的", "，以及非常棒的", "。", "最后的方法在概念上很简单，做起来却很难：让代码比你发现的时候更好。我们在梳理代码，特别是别人的代码时，我们倾向于添加功能，测试新功能，然后继续，而不会关注我们为其贡献代码的软件存在糟糕的代码，或者我们新添加到某个类的方法可能会造成混淆。因此，本文总的来说可以归纳为如下原则：", "如前所述，现在我们在对所修改代码负责，如果它有问题，我们会负责修复问题。为了抵御生产软件带来的负面影响，我们必须强制自己动过的代码会比原来更好。我们偿还技术债务而不是回避问题，确保下一个接触到这段代码的人不需要付出代价，并对其产生兴趣。没人知道以后如何，也许我们以后会感谢自己的", "。"], "tags": "开发,代码,测试", "url_object_id": "feca1912a4a2171c56a8aa2694d80c5e", "image_url": ["http://jbcdn2.b0.upaiyun.com/2017/01/d8ff4fd532a1a30d821049d62c62d106.jpg"], "author": "Justin Albano", "url": "http://blog.jobbole.com/113130/", "image_path": "full/78311042527a7716a14c0a1eccd5b49d4931b8e9.jpg"}
{"title": "写会 MySQL 索引", "create_time": "2017/11/29", "praise_nums": 2, "fav_nums": 3, "comment_nums": 1, "content": ["继上篇《读懂MySQL执行计划》后，在文章末尾，我们谈到了索引的概念，那么，今天我们就一起来聊一聊MySQL索引。", " ", "百度百科是这样描述的：", "其实，索引的概念大家都很清楚，也知道索引能够提升查询效率，但大部分童鞋在怎么建索引，建在哪些字段上有以下常见误解:", " ", "在说上述问题之前，我们先来看看另一个概念，就是区分度。", "区分度在新建索引时有着非常重要的参考价值，在MySQL中，区分度的计算规则如下:", "例如:", "结果如下:", "其中区分度最大值为1.000，最小为0.0000，区分度的值越大，也就是数据不重复率越大，新建索引效果也越好，在主键以及唯一键上面的区分度是最高的，为1.0000，在状态、性别等字段上面的区分度值是最小的。 (这个就要看数据量了，如果只有几条数据，这时区分度还挺高的，如果数据量多，区分度基本为0.0000。也就是在这些字段上添加索引后，效果也不佳的原因。)", "值得注意的是：如果表中没有任何记录时，计算区分度的结果是为空值，其他情况下，区分度值均分布在0.0000-1.0000之间。", " ", "\n个人强烈建议，建索引时，一定要先计算该字段的区分度，原因如下:", "\n可以查看该字段的区分度，根据区分度的大小，也能大概知道在该字段上的新建索引是否有效，以及效果如何。区分度越大，索引效果越明显。", "\n多列索引中其实还有一个字段的先后顺序问题，一般是将区分度较高的放在前面，这样联合索引才更有效，例如:", "像上述语句，如果建联合索引的话，就应该是:", "而不是:", "\nMySQL会一直向右匹配直到遇到范围查询(>、<、between、like)就停止匹配，比如", "在上述语句中，status就不会走索引，因为遇到<时，MySQL已经停止匹配，此时走的索引为：(type,created_at)，其先后顺序是可以调整的，而走不到status索引，此时需要修改语句为:", "即可走status索引。", "\n不要在索引列上，进行函数运算，否则索引会失效。因为b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。", "\n扩展优先，不要新建索引，尽量在已有索引中修改。如下:", "在表t_base_user表中已经存在idx_name索引，如果需要加入idx_name_email的索引，应该是修改idx_name索引，而不是新建一个索引。", " ", "上面说了，如何新建索引，现在我们就可以来回答，在第一步中存在的误解了。", "答: 一个好的数据表设计，在一开始就要考虑索引的创建，而不是等到后续出问题了，影响业务使用了，才新建索引来救场，而且后续创建索引的成本也相对高很多。(这就是给生产事故留下生根发芽的机会呀)", "答: 这个误解比较常见，但where条件后的字段不需要全部建立索引，过多的索引，也会导致索引文件剧增，也还达不到期望中的效果。详细请参考上述新建索引的小节。", "答: 这个误解就得好好说说了，现在互联网公司特别是B/S架构下，业务逻辑均剥离在代码逻辑层，到最后SQL层面，其实都是一些简单的SQL，只有些许连接查询，更多的还是单表操作，(C/S架构中有很多在SQL层面的写逻辑的)，你说这些语句简不简单。", "答: 我们刚才说过，联合索引的顺序，是根据最左前缀原则，以及区分度来区分的，和where条件后字段的先后顺序无关。", "答: 在区分度较小的字段上新建索引，基本无效，还会增加大量的索引文件，你说是不是得不偿失。", " ", "上面介绍了MySQL索引的概念，新建索引时的一些技巧。这么理论的东西，对于平时没有使用或使用比较少的童鞋，此时对索引的重要性可能还没那么直观，那么，我就来说说我在索引上吃过的亏，踩过的坑！同时也是未建索引常见问题！", "\n这个问题可是未建索引的常客哦，（这里也还有很多细节呢，如: 隐式类型转换等等）", "\n在某次上线时，作为服务提供者，提供服务给业务方使用。一开始以为就提供一个简单的服务，也已经测试完成，心里还在窃喜，今天总算可以早早回家了！", "\n", "\n实际一上线，在生产环境中导致业务方请求调用时，而且每次请求均超时，数据也已落地，此时只能review代码，最后发现生产中有个慢查询导致，活活的花费了10多秒，这个语句有多简单呢，你绝对想不到，就是一个简单的单表where查询。", "你说这种原因导致服务不可用，你说冤不冤，气不气！（这也是我为什么说，一个好的数据表设计，从一开始就要考虑新建索引了）。", "在查询频率比较高的SQL上，如果出现未建索引，导致慢查询的话，那可是会导致数据库服务器CPU 100%，影响可是整个系统哦。", "\n上面说了好几类，由于没建立索引而导致的问题，轻则导致慢查询，影响系统效率，重则，导致CPU 100%，影响整个系统的使用，看到这里，你说索引重不重要？", " ", "上面简单说了，索引是什么、有什么用，以及建立索引时的一些技巧，还着重说了索引的重要性。那么索引这么重要，在平时编码时如何规避问题呢？以下是我个人的建议:", " ", " "], "tags": "IT技术,MySQL,数据库", "url_object_id": "986ccf2aa5053a80703a2f892c18fcab", "image_url": ["http://jbcdn2.b0.upaiyun.com/2015/11/e78e36715813f49e9e62fe0c6050075c.png"], "author": "andyqian", "url": "http://blog.jobbole.com/113142/", "image_path": "full/35011d6168be00e949624c665041dc724e3ad786.jpg"}
{"title": "成熟开发者的“元品质”", "create_time": "2017/12/04", "praise_nums": 1, "fav_nums": 0, "comment_nums": 0, "content": [], "tags": "职场,程序员", "url_object_id": "dbb11ac8ca732aec09107bbe3caa6c00", "image_url": ["http://insights.thoughtworks.cn/wp-content/uploads/2017/11/career.jpeg"], "author": "伯乐在线", "url": "http://blog.jobbole.com/113166/", "image_path": "full/8a8df86e3fed5b3767e81281dbdce35a24ce7ea9.jpg"}
{"title": "自动化来势汹汹，未来的程序员该何去何从？", "create_time": "2017/11/30", "praise_nums": 1, "fav_nums": 3, "comment_nums": 2, "content": ["【编者按】：AI、自动化，这些技术进步不仅威胁到到了其他行业的工作，甚至有声音认为，连开发这些技术的程序员其自嘲的“码农”地位都将不保。比方说，OpenAI 前研究科学家 Andrej Karpathy 就", "，在AI引领的软件2.0趋势下，传统程序员真的有可能要失业了。不过，跟 Tyler Elliot Bettilyon 相比，这些都是对程序员未来的片面看法，相对而言，他对程序员未来的工作前景分析更加全面客观，值得从业者好好", "，思考未来作何选择。", "我的一位朋友最近提出了一个问题，这样的问题我在不同场合都听说过，只是形式各不相同：", "这个问题同时指向了两点，一是技术工作的未来，二是对软件工程领域的普遍误解。虽说有大量“荒谬的行话”没错，但是还有同样多的困难问题等着那帮有着合适技能组合的人去解决也是事实。一些软件工作绝对是要消失的，但在很多年的时间里有着合适经验和知识的一些程序员仍然会继续享有声望并且拿到可观的报酬；作为例子可以看看最近AI研究人员薪水的爆发以及可用人才的相应短缺就知道了。", "在不断变化的技术业能够保持与时俱进是个挑战。通过审视取代现在哪些程序员的技术可以预测出市场的那些岗位会消失。此外，要想预测特定技能薪酬和需求变化我们应该考虑学习编程群体的壮大情况。就像Hannah指出“公众对计算机的无知”导致了那些会编程的人工资高企一样，大众对计算机的认知正在逐年变得更加娴熟。", "对自动化取代工作的恐惧既不新鲜也不是杞人忧天。在任何领域，尤其是在技术领域，市场力量都会推动着企业朝着自动化和商品化发展。Gartner的炒作周期曲线就是对这一现象的很好诠释。", "Gartner 2017炒作周期曲线", "随着时间延续，特定想法和技术把生产力推进到了“高原期”，最终实现自动化。但凡回顾历史就能得出结论，自动化是有能力摧毁特定的就业市场的。从作物收割到，到汽车装配，不同行业的技术发展正在不断替代和增强人类劳动力，降低成本。一位教授曾经在自己的编译器课程上总结说，“以史为鉴，看看纺织业和钢铁业：你是想建造机器和工具呢，还是想操作那些机器？”", "在这里“机器”的隐喻是指计算机编程语言。这位教授其实是问：你是想用JavaScript开发网站呢，还是想开发驱动JavaScript的", "？", "网站的创建工作已经由WordPress等工具自动化了。而另一方面V8的竞争对手也越来越多，其中一些正在解决开放的研究问题。语言会来了又走（想想看现在还有多少分Fortran的工作？），但总会有人开发下一种编程语言。我们是幸运的，因为编程语言的实现也是用编程语言写的。作为软件的“机器操作者”把你推上了一条成为“机器制造者”的道路，这是过去的钢铁厂工人所没有走过的。", "语言、解译器以及编译器的不断增多向我们表明，每一台摧毁工作的机器也提供了对这些机器进行改进、维护等的新机遇。尽管消失的工作的列表正在变得越来越长，但是人类全体都认为“我想已经没有工作可以做的了”的那个历史性时刻还没有到来。", "Pinsetters", "商品化会向我们所有人袭来，不仅仅只是软件工程师。在整个历史长河中，人类劳动力都在不断被非人类的东西取代或者增强，导致工作所需的人更少，对技能的要求更低。自动汽车和自动卡车只是这个伟大的人类传统的一时之兴。如果创造和自动化的周期是生活的现实，接下来我们自然要问：哪些工作和行业有危险，哪些又暂时无忧呢？", "AWS、Heroku等类似托管主机平台永久性地改变了系统管理员/DevOps工程师的角色。互联网企业过去绝对需要自己的服务器专家。其中一些精通Linux；一些懂得如何用Apache或者NGINX配置服务器；有的不仅会对服务器、路由器等各种物理组件进行布线，而且还懂配置路由表以及各种必要的软件来让服务器供大众在web上访问。尽管现在仍然有一群人懂得干这一行，但AWS正在令其中一些技能变得过时——尤其是对经验要求更低的一些事情以及硬件类的事情。对于灵通物理基础设施的人来说，Amazon（以及Netflix、Google等）内部还有非常赚钱的角色可以担任，但是中小企业方面对这些角色的需求已经大为减少。", "像SalesForce、Tableau以及SpotFire这样的“商业智能（BI）”工具正在开始占领历史上属于软件工程师的地盘。这些系统已经减少了对内部数据库管理员的需求，但作为一种通用技能同时也增加了对SQL的需求。BI还减少了对内部报表技术的需求，但增加了对“集成工程师”的需求，后者的工作是将来自企业的数据流交给第三方平台进行自动化处理。一度为Excel和电子表格所统治的数据管理领域正在逐步被推向Python或者R这样的脚本语言以及SQL上。一些工作会消失，但对能够写软件的人的需求总体上来说是增长的。", "就更接近软件而言，数据科学是商品化的一个很好的例子。Scikit.learn、Tensorflow以及PyTorch都是、方便大家编写机器学习软件的软件库。事实上，用同一个数据集跑许多有着不同参数集、同时赌气算法实现几乎一无所知的机器学习算法是有可能的（当然这么做是不明智的，这里只是说可能性）。我敢打赌未来几年商业智能公司会尝试将这些类型的算法集成到自己的工具里面。", "从很多方面来说数据科学就像5到8年前的web开发——这是一个蓬勃发展的领域，因为“技能鸿沟”，你能够获得的效果知识很少。后来，随着web开发训练营的关停整合，数据科学训练营又在原来的地方冒出来。收购了原来的web开发训练营（Dev Bootcamp）的Kaplan现在就是设立了一个数据科学训练营（Metis），并且决定关闭DevBootcamp，同时维持Metis的运转。", "内容管理系统是工具里面因为自动化而取消对软件工程师需求的最明显例子之一。SquareSpace和WordPress是当今最流行的CMS系统之一。这些平台显著降低了只有一点前端web开发技能的人的价值。事实上，做网站并把它放上网的门槛已经低了很多，低到毫无变成经验的人也能够每天都成功地发布新网站。这些人没法做出服务数十亿人的、交互性极强的网站，但是替自己的企业制作网站为客户提供所需信息绝对是可以的。一个可爱的登录页，再加上如何寻找公司、如何联络自己这样的信息对于当地饭店、酒吧或者零售店来说已经绰绰有余。", "如果你的企业不是以“互联网业务”为主，想弄个过得去的网站放到网上从来都没有像现在这么容易。因此，可迅速做好网站并放到网上的 web承包商产业一度欣欣向荣，但现在已经变得没那么赚钱了。", "最后，在这种情况下如果忽视计算机的物理方面的话这种态度近乎自大。用Mike Acton的话来说：“软件不是平台，硬件才是平台”。搞软件的人至少要学习一点计算机体系结构和电气工程的知识才算是明智的。硬件的一次大动荡，消比如费者级的量子计算机的出现将会改变软件工程的一切。", "量子计算机仍然还有很长一段路要走，但对GPU的兴趣在增加，同时朝着并行化的方向发展是即将到来的转变。 CPU的速度近几年来一直停滞不前，而在当时，对机器学习和“大数据”的渴望似乎已经达到无可遏止的地步。随着对大型数据集的处理需求与日俱增，OpenMP，OpenCL，Go，CUDA等其他并行处理语言和框架将继续成为主流。为了在短期内快速提高竞争力，显著并行化将成为全面需求，而不仅仅局限在高性能的小众应用领域，比如操作系统，基础设施以及视频游戏等。", "网站无所不在。", "指出，约15%的专业软件工程师正在“互联网/Web服务”公司工作。美国劳工部预计Web开发的增长率比平均岗位需求增长速度高很多的情况仍将继续（", "）。鉴于其可视性，这个行业很大一部分的关注点都会落在“填补技能鸿沟”上面。编码训练营几乎只教Web开发，而Udemy、Udacity以及Coursera等类似市场上也充斥着Web开发的课程。", "整个Web开发技术栈的自动化程度越来越高，入门级的新程序员大量涌入Web开发领域，这导致部分人预测软件开发人员将会面临一个", "。有的人甚至更加激进一点，认为把这个产业推向蓝领市场是大型科技公司设计的战略。当然，其他人会说我们正朝着又一次泡沫破裂进发。", "对特定技术需求的变化已经不是新闻。技术的语言和框架总是会有此消彼长的情况。Web开发目前的化身（“JS为王”）的走势最终会像2000年代早期的Web开发走势一样（还记得Flash吗？）所不同的是，这次在当今流行的web开发框架上很多人都有着明确（且主要）的教育经历。在你决定给自己贴上“React开发者”标签之前，请记住曾经有人自认为是“Flash开发者”。如果把你的职业生涯吊死在一种语言、框架或者技术上无异于玩轮盘赌游戏。当然，要预测哪些技术还将继续发展下去是相当困难的，但是如果你打算找个东西全力以赴的话，我建议可以按照Lindy效应（对易损的东西来说，每多活一天，都会缩短其寿命；相反的，对于不易损的东西来说，每多活一天，都将更拉长其存在寿命。）选出一些已经经受住了时间考验的语言，比如C语言。", "下一代人将具备一种事实上的技术素养水平，这是X世代乃至千禧世代所不具备的。其结果之一是，这些人将会使用下一代的CMS工具。这些工具会变得更好，年轻的工作者也会用得更好会更好地使用它们。随着充满渴望技能熟练的年轻人进入就业市场，这两个因素的结合绝对会降低低水平的IT和web开发技能的价值。高中也在迎头赶上，开始提供计算机科学和编程课程，一些受过良好教育的高中学生一旦毕业可能就会马上以编程实习生的身份加入劳动大军。", "另外一大群的新人是MBA和数据分析师。一度由Excel主宰的岗位列表正在开始把SQL列为“具备更好”，甚至变成了“岗位要求”。诸如Tableau，SpotFire，SalesForce等基于Web的指标体系在继续取代电子表格作为报表生成主要工具的地位。如果这种情况持续下去，更多的数据分析师将会开始学习如何直接使用SQL，因为这要比把数据导出到电子表格更加简单。", "想要超越同行在职场继续往上爬的人正在网上学习数据库和统计变成语言方面的课程。有了这些新技能之后，通过机器学习和统计库的学习，他们就可以把自己定位成数据科学家了。走这条路的话看看Metis的课程就是很好的例子。", "最后，获得计算机科学和软件工程学位的人数在不断攀升。比如说，普渡大学报告说，其计算机课程课程的申请量在5年间已经翻了一番。康奈尔大学的计算机科学毕业生也出现了类似的爆发式增长。鉴于软件的发展和普及，这种趋势并不令人惊讶。年轻人很难会想象出计算机在我们的未来发挥的作用会越来越小，所以为什么不去学习一些能提供工作保障的东西呢。", "现在这个行业的一个普遍的观点是，你在大学四年计算机科学课程中受到的教育大多是不必要的东西。我已经多次在编程训练营的大厅里，web开发商店里听到过这样的说法，甚至像Eric Elliott这样的业界知名人物都", "。不过反方意见也很流行，有的甚至说“", "”。", "我的观点跟Eric Elliott一样，我认为学习编程应该有更多的选择，而4年的学位未必许多人的最佳选择。同时，我也同意William Bain的观点，即跨编程领域的基础技能对职业寿命至关重要，但是除了大学课程，目前你很难在其他地方找到这些信息。我曾经写过，作为长期职业生涯的基础，有抱负的工程师应该学习什么样的技能，并且解释了为了帮助分享这些知识，我加入了Bradfield。", "不同形态和规模的编码学校正变得愈发的无处不在，这里面有很好的理由。你不用了解大O符号、晦涩的数据结构以及算法细节也能学习编程。然而，尽管斯坦福大学的新鲜热辣的毕业生确实也能跟刚出Hack Reactor出来的人竞争一些工作，但这种情况只在一个或两个子行业中出现。编码学校和训练营的毕业生还没有申请嵌入式系统、密码/安全、机器人、网络基础设施或人工智能研究和开发方面的工作。但这些领域就像web开发一样正在迅速发展。", "一些与编程相关的技能已经开始从“稀有技能”向“基准期望”过渡。相反，建立像AWS这样强悍的引擎的工作已经非常普遍的。推动技术发展的大公司——比如Amazon、Google、Facebook、Nvidia以及Space-X等——通常不会找“对JavaScript有基本了解”的人。 AWS每天为数十亿用户提供服务。为了支撑这种载荷量，AWS基础设施工程师需要对网络协议、计算机架构有深入的了解，并且要有多年的相关经验。就像任何学科一样，这里面有业余爱好者和工匠之别。", "这些知名企业正在解决研究问题开发真正建立真正开拓能力疆界的系统。然而，即使在基本的编程技能越来越普遍的情况下，他们仍然很难填补其中的空缺。可以编写算法来预测基因序列变化从而带来想要结果的人在未来将会非常值钱。可以对卫星、航天器和机械自动化编程的人将继续受到高度重视。这些领域并不适合采取前端web开发那种“3个月密集学习计划”的人才速成，至少还没有像样的成功先例。", "因为计算机科学开头是“计算机”这个词，所以我们可以认为，到2025年，所有的年轻人天生就能理解计算机。不幸的是，计算机的普及并没有造就对数学、计算机科学、网络基础设施、电气工程等有着事实上的了解的新一代人。会用计算机跟计算研究是不一样的。尽管数学自创始伊始就已经存在，但十分精通统计学的人仍然相对较少，而计算机科学也是一样的陈旧。 Euclid发明了好几种算法，其中之一是在每次发出HTTPS请求时使用；每次我们登录网站都要用HTTPS这一事实并不会自动让任何人了解这些协议是如何工作的。", "更成熟的专业领域往往会有双峰的工资分布模式：相对较少的从业人员赚走了相当多的钱，其中大多数人的工资都不错，但并没有处在前1%之列。美国全国法律就业组织收集的数据可以十分清晰地反映出这一现象。大部分法学毕业生的工资在45000美元到65000美元之间，这是很高的工资了，但很难跟“顶尖专业人士”联系在一起。", "法律专业的工资分布情况", "我们往往会认为，所有的法律毕业生都有可能成为一家律师事务所的合伙人，但事实上他们有很多条路可以走：律师助理，文员，公设辩护人，法官，企业法律服务，合同写作等等。计算机科学专业的毕业生也有很多选择，从Web开发到嵌入式系统不等。基本的编程技能会继续成为一种期望，而不是“锦上添花”，我怀疑编程工作也会出现类似的分布情况。", "尽管还会有一批程序员靠着不断推进技术极限而赚到很多的钱，但是为新的以计算机为中心的经济提供动力的中级程序员队伍将会越来越壮大。Web开发人员的平均工资肯定会随着时间的推移而下降。说虽如此，但我怀疑“程序员”的岗位总量只会继续增长。随着人工的供给侧开始满足需求，希望我们将看到各种中级编程工作将会出现有益的繁荣。对于那些正在开辟无限可能的程序员来说，他们还将继续拿到顶级的职业工资。", "不管你是属于哪一类的程序员，从事技术行业意味着终生都要继续教育。如果你想成为第二类程序员，你就得加大投入，去学习如何创造机器，而不仅仅是使用机器。", " ", " "], "tags": "职场,程序员,自动化", "url_object_id": "4f618c983b25ffff16b2f08257be1136", "image_url": ["http://jbcdn2.b0.upaiyun.com/2012/08/programmer-developer-at-work.jpg"], "author": "Tebba Von Mathenstien", "url": "http://blog.jobbole.com/113147/", "image_path": "full/bb38d11fb4038702790e0370ed966c50f186ff40.jpg"}
{"title": "如何轻松记住 Linux 命令", "create_time": "2017/11/30", "praise_nums": 2, "fav_nums": 2, "comment_nums": 1, "content": ["Linux 新手往往对命令行心存畏惧。部分原因是因为需要记忆大量的命令，毕竟掌握命令是高效使用命令行的前提。", "不幸的是，学习这些命令并无捷径，然而在你开始学习命令之初，有些工具还是可以帮到你的。", "首先要介绍的是命令行工具 ", "，它能帮你记住那些你曾经用过的命令。包括应用最广泛的 Bash 在内的大多数 ", "，都会创建一个历史文件来包含那些你输入过的命令。如果你用的是 Bash，这个历史文件就是 ", "。", "这个历史文件是纯文本格式的，你可以用任意的文本编辑器打开来浏览和搜索。", "确实存在一个可以帮你找到其他命令的命令。这个命令就是 ", "，它能帮你找出合适的命令来完成你的搜索。比如，假设你需要知道哪个命令可以列出目录的内容，你可以运行下面命令:", "这就搜索出结果了，非常直接。给 “directory” 加上复数后再试一下。", "这次没用了。", " 所作的其实就是搜索一系列命令的描述。描述不匹配的命令不会纳入结果中。", "还有其他的用法。通过 ", " 标志，你可以以更灵活的方式来增加搜索关键字。试试这条命令:", "你会觉得应该会有一些匹配的内容出现，比如 ", " 对吗? 然而，实际上并没有匹配出任何结果。再说一次，apropos 只会根据字面内容进行搜索。", "现在让我们试着用 ", " 标志来把单词分割开来。（LCTT 译注：该选项的意思是“and”，即多个关键字都存在，但是不需要正好是连在一起的字符串。）", "这一下，你可以看到很多期望的结果了。", " 是一个很棒的工具，不过你需要留意它的缺陷。", "ZSH 其实并不是用于记忆命令的工具。它其实是一种 shell。你可以用 ", " 来替代 Bash 作为你的命令行 shell。ZSH 包含了自动纠错机制，能在你输入命令的时候给你予提示。开启该功能后，它会提示你相近的选择。在 ZSH 中你可以像往常一样使用命令行，同时你还能享受到极度安全的网络以及其他一些非常好用的特性。充分利用 ZSH 的最简单方法就是使用 ", "。", "最后，也可能是最间的方法就是使用 ", "。", "有很多在线的速记表，比如", " 可以帮助你快速查询命令。", "为了快速查询，你可以寻找图片格式的速记表，然后将它设置为你的桌面墙纸。", "这并不是记忆命令的最好方法，但是这么做可以帮你节省在线搜索遗忘命令的时间。", "在学习时依赖这些方法，最终你会发现你会越来越少地使用这些工具。没有人能够记住所有的事情，因此偶尔遗忘掉某些东西或者遇到某些没有见过的东西也很正常。这也是这些工具以及因特网存在的意义。", " "], "tags": "IT技术,Linux", "url_object_id": "7977373aa7cda30ddbb6f13b26014e73", "image_url": ["http://jbcdn2.b0.upaiyun.com/2017/05/77d80105fd15f2465894827e23cc4842.jpeg"], "author": " Nick Congleton", "url": "http://blog.jobbole.com/113158/", "image_path": "full/d1b17b98748a74826464a08e6d30a4ee1b15b171.jpg"}
